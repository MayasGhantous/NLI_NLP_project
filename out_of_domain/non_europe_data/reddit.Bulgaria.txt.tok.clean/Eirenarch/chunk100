  it may not be immune to mass surveillance as it once was but i do n't care since it is actually usable which is more important . 
  just for the record typescript is statically typed . 
  while there is not one opinion on what strongly typed means ( and this is why it should not be used ) typescript would n't be considered strongly typed by most people 's definitions . 
  the angular way and that engineer smile, 
  the angular way with that smooth binding style, 
  a new religion that will bring you to your knees, 
  the angular way if you please, 
  the only reason silverlight died was because ms could not push jobs to allow it on ios . 
  one could argue that flash died for the same reason although flash had much more serious problems from technical perspective than silverlight . 
  what happens if you assign an object to any and change it somehow ( by adding attributes for example ) and convert back to a completely different type . 
  would that work and is n't it manifestation of weak typing ? 
  but in typescript you can directly treat the object as one produced of a different type . 
  you can always pass an object through any and return it back to whatever type as far as i know . 
  btw what is your definition of strong typing since as i pointed out everyone has his own , 
  my understanding is that c is considered weakly typed because you can treat one data as another . 
  for example you can treat an int as an array of 4 bytes . 
  same holds true via different mechanisms for typescript and javascript . 
  coercion is another think that makes a language weaker but weak vs strong is not a boolean thing , it is a spectrum . 
  anyway i wish that people stop using the word strong for typing . 
  it is not well defined and it does not give important information ( static vs dynamic is much more important ), 
  then there should be random removes while iterating . 
  i mean we have to find a case where linked lists win :(, 
  the number of non-js users is under the statistical error . 
  therefore it is entirely possible that the number of non-js users in the world is actually negative . 
  time to call zed shaw to the rescue . 
  he should do a talk on programming motherfucker vs async programming, 
  part 2 :, 
  anyone else having trouble with . net fiddle on ie ( 11 ) recently ? 
  i know that not many devs use ie but surely in the . net circles at least some work for ms and try their company 's dogfood . 
  in addition it became broken after some recent update . 
  thanks . 
  i did so . 
  i was debating if i should do it before commenting here but i just assumed you do n't care since it is completely broken and i do n't expect that you can miss it if you even try it once . 
  actually i think ie is quite good at some things . 
  for example i use a laptop with touch and i can definitely say that ie is the best touch browser . 
  i am using mainly the desktop mode but it is true for both modes . 
  opera and firefox are unusable and chrome is good but definitely not as good as ie . 
  there is no `` microsoft 's acquisition of xamarin '', 
  wait !, 
  you mean `` all in '' does n't mean `` attack '' ? 
  i look down on macro games . 
  macro players are just abusing their superior muscle memory they have invested many hours to build instead of using creativity or even recognizing what is the good thing in parting 's or mc 's strategies . 
  so they are not an all-in by any non-starcraft definition . 
  do n't you love it when artosis announces `` a third all in after the first two failed '' ? 
  php is very bad example . 
  most language do keep very reasonable backward compatibility . 
  java and c++ come to mind . 
  you can claim that they are a mess but they still benefit more from backward compatibility than if they fixed their quirks and i challenge you to point a case where backward compatibility hurt c # in a significant way . 
  basically with php as an example you are saying that python 2 is as bad as php from language design point of view . 
  is that really the case ? 
  btw i do think python 3 is the way forward . 
  it may have been a mistake but there is no going back now . 
  is everyone here a communist like this guy or its only him ? 
  i guess i should not study english via starcraft :(, 
  you do n't understand nvidia 's obsession with closed environment but it seems to work pretty well for them . 
  just 3 days ago i bought a gtx770 and watch_dogs was the primary reason for upgrade . 
  what is more what do they have to lose ? 
  if tools like the one you describe do appear they will still be useful with nvidia gpus so it is a win-win situation for them . 
  open source is for losers . 
  amd is a good example why . 
  amd are free to make a toolkit where they provide similar benefits and have lazy devs use it as an alternative path for amd gpus, 
  amd are free to produce their own optimization libraries . 
  yeah , every game should ran equally slow on every gpu out there . 
  optimization communism for everyone , comrade !, 
  i have been told this is not as big of a problem as it sounds . 
  a friend of mine who is a game developer says that the code that is specific for directx and opengl in their game is about 5 % and they do n't change it that often . 
  i imagine that optimizing for two vendors would n't be that scary . 
  that being said their game is tropico ( 3/4/5 ) and it is not so graphics intensive . 
  the settlement being that intel compilers should warn users that their code is only optimized for intel processors . 
  i guess users of gameworks are fully aware of the equivalent issue with gameworks and nvidia would gladly add this notice if they are required to . 
  or more likely games will have two different code paths where each one will get the maximum their hardware is capable of . 
  never bought an ie game and the only ea published game i bought was orange box, 
  no chance for mantle . 
  directx 12 will kill it and opengl is adding extensions that achieve similar results . 
  i fail to see who will develop titles that are only optimized on amd hardware when they can do so for both nvidia and amd . 
  why would an amd user have a shitty experience ? 
  the experience is the same just the minimum requirements for an amd gpu are much higher . 
  so will you buy amd card that is much more expensive for the same performance ( in watch_dogs for example ) just to even the playing field ? 
  will you buy xbone only because sony is ahead ? 
  here is food for thought :, 
  what if there is someone who can make a better console if only he can get up to speed but the fact that big players are still moving forward wo n't let this person catch up . 
  maybe if one console manufacturer dies , the other will stagnate and let that new player come in and then they can compete better than the previous two . 
  for example microsoft makes a better browser than netscape and things go slowly , microsoft dominates , nobody else wants to make browsers . 
  microsoft kills netscape and totally stops developing internet explorer which gives the opportunity for firefox to rise up and create a competition that is much more fierce than ever before . 
  may be so but this is only true if other titles provide better experience with amd gpus and the article makes it sound like there is no equivalent library to let developers easily achieve comparable level of optimization . 
  in the absence of additional information we may assume that no game can produce better graphics on an amd gpu unless nvidia allows amd developers to see how the nvidia optimizations are implemented . 
  in theory it is possible that there is a way to optimize for both and it seems like amd is claiming that their open innovations provide just that but it seems like in practice they do not point out to anything devs could have done to optimize for amd gpus . 
  the fact that devs for multiple games and engines have n't used such a technology points to the fact that it does not exist . 
  i suggest you buy amd to keep the balance in the market . 
  three days ago i bought gtx770 , 
  a gpu is not only hardware . 
  it includes drivers and tools . 
  if amd ca n't make drivers and tools they are not a meaningful competition anyway . 
  amd should make their own set of libraries for devs to produce optimized versions of their games for their gpus , not complain that they do n't have access to nvidia 's tools . 
  well if you play the game on an amd gpu you are using the `` do n't use gameworks '' version . 
  in addition it seems that gameworks is something quite different from mantle and not an alternative . 
  game devs could use mantle if they see fit but for some reason they choose not to and amd chooses to cry like a little girl . 
  so you believe devs choose gameworks because of nvidia `` incentives '' and not because it is in some way superior to amd offerings be it performance or ease of use ? 
  then all amd has to do is provide equal incentives . 
  also i do n't buy the theory of `` incentives '' since the user base of amd gpus should be enough of an incentive .
