  ok let me put it this way : is there a commercial game engine that does not have directx implementation on at least one platform ? 
  thanks !, 
  ever is quite a long time to make predictions for . 
  for some reason he refuses to post here ( he is modest ... go figure ! ), 
  but he has uploaded art that is missing from your gallery here - http://imgur.com/a/fgwjw#0 . 
  you may want to include it in the post . 
  he is doing well . 
  turns out he stopped playing poker and only works on the ~ ~ bulgarian ~ ~ [ poker site ] ( http://grinders.org/ ) he founded . 
  still does creative things . 
  he modifies their cms and write codes for extensions without being a programmer , 
  xbox 360 had sold more than ps3 worldwide for quite sometime . 
  it was just an year ago that ps3 managed to pass xbox 360 in all time sales . 
  ps3 is a perfect example that you can actually recover from a bad start even within a generation . 
  even if ms decides to sell xbox ( and i really doubt this will happen ) it will still continue to exist as a new company . 
  basically you did n't have a backup but for some reason you thought you had . 
  am i the only one who thinks parent is brilliant sarcasm ? 
  i swear i came to this thread to post this although i would have quoted from memory with mistakes . 
  so what ? 
  first of all even if it totally flops there will probably be another generation . 
  in addition how did the ps3 do in the first year ? 
  what 's to stop ms from doing something like shaving $ 100 off the price or introducing some killer feature in the upcoming 5 years ? 
  in my opinion they just failed miserably at marketing . 
  xbox one has been on the market for less than an year . 
  we 're talking about xbox one do n't we ? 
  i mean does anyone dispute that the 360 was a success or at the very least could n't be ignored by engine developers ? 
  i doubt consoles or the pc are going anywhere as a gaming platform . 
  i just do n't see the big titles going mobile only . 
  of course everyone should invest where he sees fit . 
  as someone who works with microsoft tech i could use that on tech conferences . 
  especially non-microsoft ones where people love to hate microsoft . 
  i followed the first one but i was disappointed that they do n't get into it flamewars . 
  i was expecting that they would attack each other with puns and jokes related to the companies they work for . 
  `` tell me how starcraft works on your chromebooks googlers ? '', 
  i was disappointed to find only one zynga guy do things like this . 
  this is the main reason i stopped watching . 
  if i was in charge for the league i would allow observers ' chat and encourage it flamewars from the teammates of the players . 
  to be honest skype has gotten significantly better since ms bought it . 
  for example offline messages now work . 
  the presentation ignores the biggest reason i do n't want to write html apps - i do n't like it . 
  javascript good or bad is not my language of choice and html good or bad is not my ui framework of choice . 
  i can even list the reasons why but does it matter ? 
  if someone wants to hire me to write html/js apps it will cost more than with my chosen tech because i will be less productive and i will charge more just because i am annoyed . 
  i find it really interesting that web proponents advertise asm.js as a point in their favor while in reality asm.js is a way to not use web tech and still run in the browser . 
  windows phone apps can be written in js too ( well at least from now on with full support of the winrt api ) . 
  that being said i generally agree with you . 
  on the other hand the same way you claim that no one cares about the desktop pc anymore one can claim that nobody cares about resource intensive apps anymore . 
  it is obvious to me that resource intensive games are not what drives the mobile market . 
  i bet flappy bird beat all of those great resource intensive games in terms of income and angry birds can be built with web tech . 
  again i do not disagree with you in general i just think that there is a huge portion of the mobile software market that can be satisfied by web tech . 
  flappy bird was n't written with web tech ? 
  i was under the impression that it was . 
  i do n't know how you would market html5 and js to a native ( for whatever value of native like c++ , java , c # ) dev . 
  they certainly fail to market it to me and i do know javascript . 
  swift is certainly making the world a better place !, 
  c # already runs on their platform . 
  why would apple invest in c # on their platform if someone else is already doing it ? 
  besides their language has the potential to be better than c # once they add iterators and async/await . 
  one can even argue that it is better now with its non-nullable types , tuples and pattern matching support . 
  is there an example of error handling without exceptions ? 
  there is nothing really new in swift . 
  most of it looks like c # done without backward compatibility and the requirement to look like java . 
  tuples , pattern matching and non-nullable types are cool addition on top of that but nothing really new . 
  maybe nih but the end result is really impressive . 
  also apple are not in the `` run everywhere '' business . 
  after all they are aiming to replace objective-c not be the new java . 
   more developers, 
  they have a lot of developers . 
  better to take their existing objective c developers than try to reach for the c # devs which may or may not come . 
   they basically took c # from five years ago and did n't really add anything to it, 
  did n't they ? 
  how about non-nullable types , values in addition to variables , extension everything ( as opposed to methods ) , more powerful interfaces , tuples and pattern matching ? 
  some of these will never come to c # . 
  on the other hand the missing features from c # can easily be added . 
  the important ones as i see it are iterators and async/await . 
  exceptions are debatable in the presence of tuples and pattern matching but they can be added as well . 
  also they do n't suffer from some of the bullshit c # copied for compatibility reasons like the broken covariant arrays . 
  it 's much closer to c # than f #, 
  i mean in swift . 
  it 's not like a `` scripting language '' means anything specific . 
  used to be a synonym for interpreted language but since these days most languages are compiled `` scripting '' is even more pointless than before . 
  yes but everything listed is not in c # . 
  even in c # 6 . 
  i did not say apple invented anything i said they built a pretty good language more suitable for their existing developer base than c # and with infinitely better interoperability with existing objective-c code . 
  i expect that swift will be a lot closer to ml languages with their maybe/option style error handling than to c, 
  pattern matching is definitely ml expired but everything else is c # . 
  in f # functions are curried and there is full type inference which makes a huge difference . 
  swift has type inference much closer to c #, 
  well i am not sure about optional return values but exceptions are definitely better than the c error code way . 
  so if you just in time compile it before shipping it to the user what is the difference . 
  in addition there are c++ interpreters . 
  if c++ can run in an interpreter is it a scripting language . 
  is the way a program is executed a feature of the language at all ? 
  i do know about this but i want to see how it looks in swift . 
  also i have never used one of these language professionally or in a substantial multi-year , multi-developer project so i am not sure what i think about this way of error handling . 
  i have read these complaints but i find them unbelievable . 
  let alone that a language with exceptions can use error codes for apis that are better with error codes but the opposite can not happen . 
  there are c++ interpreters , 
  you could but is this what they do ? 
  also how does this work with the underlying objective c library ? 
  obviously .
