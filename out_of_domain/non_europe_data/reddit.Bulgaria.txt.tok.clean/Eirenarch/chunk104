  that 's certainly true but i do n't think you can claim that c # is morally obsolete because haskell is more advanced . 
  in the current state of the industry it 's more like haskell is a research project and c # is quite innovative for an industry language . 
  i have never seen a haskell job opening in my country . 
  c # is slow runtime compared to javascript ? 
  but webapi runs on linux just fine . 
  let alone that normal companies pay for developer time much more than they pay for servers . 
  now if you need to run something on a google scale that 's a different problem ... 
  that 's true but the runtime performance is better . 
  also there are project types that do n't suffer from this problem ( web sites ) but for some reason they are considered unprofessional . 
  interestingly enough at least half of the mistakes i make when writing javascript would be caught compile time in c # . 
  however you are correct this is a problem ( one that will be solved in the next version ) but it is strange to see someone choose a tech that is inferior on every other account just for that . 
  i do n't know i am provided with it by my employer ( msdn subscription ) but i am pretty sure it does n't cost that much per seat . 
  also i have worked with completely free visual studio express on perfectly real world software and i will take that any day over the best javascript tools i have ever seen . 
  i bet i would even make that 3k in productivity really fast and i live in a country where wages are relatively low . 
  my estimation is that i am about twice as productive in c # in the long term than in javascript and while i have more experience with c # i have written a significant amount of javascript . 
  it only gets worse when we have junior developers on the team . 
  you just ca n't force junior devs to write good code in js as well as you can with c # . 
  i personally think vs without r # is superior to intellij idea with java from code editing point of view . 
  i did that last year for halo 4 . 
  got halo anniversary ( xbox 360 ) , halo 2 on pc , halo 3 , halo 3 odst , halo reach and halo 4 . 
  i do n't know why this does not include odst and reach . 
  i know they do not include master chief but come on ... 
  i also thought that reach was the best one for single player . 
  ok but why is it master chief collection instead of halo collection ? 
  i thought reach had the best single player out of all halos . 
  seems like a stupid move to release an almost complete collection when it requires just a bit more effort to release a fully compete collection . 
  did n't it get hate for the multiplayer ? 
  i thought the campaign was the best halo campaign . 
  well we are still in this thread , 
  exactly . 
  why the hell did they make a master chief collection instead of halo collection . 
  also reach had the greatest campaign of all . 
  yeah and you know you missed those two games . 
  if they include these games new fans can skip them if they do n't care about anything but master chief but when they do n't include them new players need a completely different machine ( 360 ) to play them if they want to . 
  i know i would be pissed off if i had n't already played them . 
  i thought the story was quite good . 
  i actually cared about the characters in the team and was sad when they died one by one . 
  also i enjoyed the actual gameplay more than the gameplay of the other games . 
  it was diverse and smooth ( no hard places and easy places ) . 
  and finally even if you think reach was the worst how would someone new to the game know that ? 
  i know i get pissed when i have not played some game of a series . 
  i was about to go looking for halo wars just to get the complete experience ( admittedly this is where i drew the line and did not play that one ) when i was catching up . 
  i still do n't get it . 
  i am not advocating replacing master chief game with reach i am advocating including additional game . 
  one thing i learned just last week due to working with some junior programmers on a web app that has a js front end ( single page pure javascript , no html generated on the server ) and a server backend is that you can guide them through static typing very efficiently . 
  our js guys built a bunch of js stuff and i built some backend stuff . 
  the junior devs in general use both to create screens . 
  they misuse the js stuff much more often than they misuse the c # stuff . 
  i have provided a bunch of generic methods and if the junior devs are about to do something wrong things just do n't compile and they come complaining then a senior dev looks into it . 
  with js things ... work ... mostly ... 
  sometimes the static methods can not be used to do a reasonable thing and then the junior devs come complaining and maybe we add an overload or change the existing methods to fit this use case . 
  i really would n't like to work with a bunch of junior devs in a dynamic language even a good one ( i.e. 
  not javascript ) . 
  except halo 4 all the games are old so it is not a big deal . 
  note that i am not bashing microsoft i am a fan of halo and made sure to catch up with all the games last year . 
  i just know that if i wanted to get into halo on xbox one i would want to be able to play the two missing games . 
  i know i made sure to find them and play them before playing halo 4 despite already owning halo 4, 
  well angry is probably the wrong word but i am pretty serious on not playing a title without playing the previous game . 
  i actually played halo 2 on pc because it was not on the 360 and made sure i got all the games ( except halo wars ) before playing halo 4 ( i had n't played any halo before ) . 
  presumably this collection is for people like me who want to catch up before the new game and it would mean additional effort to find the missing games and an xbox 360 to play them on . 
  the deal is good but not anything unheard of . 
  have you seen what happens on steam . 
  at one point there was an id collection featuring all of ids games . 
  ahem ... 
  broken age ... 
  there is not enough incentive to make swift run on . net since it is so similar to c # anyway . 
  btw tuples and pattern matching are my top wishes for c # but if i had to use swift i would really wish it had async/await , iterators ( yield ) , expression trees and most likely a full gc . 
  the . net convention is start , count instead of start , end . 
  true for most things like substring for example . 
  c # has tuples but no syntax to construct them or decompose them . 
  in my opinion in their current form they are nothing more than a compatibility feature . 
  i like f # but i have a bit of trouble handling the syntax and thinking in f # idioms . 
  i understand most of them on their own when i try hard but c # comes much more naturally . 
  i hope some day i have a chance to write more f # code and probably start to `` feel '' the language . 
  you ca n't achieve async/await functionality without a language feature . 
  the language feature might be iterator/generator blocks , coroutines or something equivalent but you ca n't achieve async/await on a pure library level . 
  you still need the compiler to split your methods/functions . 
  yes , and j # failed . 
  turns out libraries are more important than languages for portability . 
  in addition currently c # is in much wider use than swift so why do that ? 
  no they would n't . 
  it does n't work that way . 
  what is more literal ports of ios apps to windows platforms will be horrific user experience . 
  as a user i would prefer that these are banned rather than encouraged . 
  i do n't have anything against ios but if you are gon na build a quality app for a platform you have to follow the ui conventions of this platform otherwise even a perfect app will translate into crap . 
  agreed . 
  although actual tuples will be worth adding too . 
  after all sometimes you do want that ( key , value ) or ( result , error ) tuple . 
  so did you post a discussion for records on roslyn 's codeplex page so i can upvote it ? 
  can we stop paying attention to the cyborg man and blame the turing test or other concepts for the fact that he is a clown ? 
  notably missing - [ scams that derail programming motherfucker ] ( https://www.youtube.com/watch?v=nei_pj558cy ) from zed shaw, 
  that 's true except that i am sad every time something that runs in a browser that is not pure information presentation like wikipedia wins . 
  congratulations we let the inferior lowest common denominator win again and we will now program games and applications in javascript ( unless asm.js saves us ), 
  no , there is not but let 's not pretend that this is what pushed webgl ( or other web tech for that matter ) forward . 
  webgl was driven by the desire to develop crappy games that run in a browser ( and yes they are crappy , i have played some ) . 
  web sockets and web workers were developed to facilitate building applications that should be native in the browser and so on . 
  everyone is pushing for application platform features . 
  i am hoping that there will be some kind of bridge from the dom to asm.js and an option to compile other bytecode ( clr , jvm ) to asm.js and everyone can choose their language . 
  asm.js currently works only for games . 
  it 's not like you can build a web app in c++ .
