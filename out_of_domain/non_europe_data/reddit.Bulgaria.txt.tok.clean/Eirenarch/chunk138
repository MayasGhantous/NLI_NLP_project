  on the other hand i am ok with the `` selected '' option . 
  i play with healthbars on `` damaged '' and i do not care if i will be better player with always on . 
  i 'd rather not play than play with healthbars on always . 
  i have turned off streams because of healthbars on always ( especially the team colored bullshit that does n't allow me to judge based on healthbar color ), 
  dreamhack , please do n't !, 
  i hereby declare that i will turn off every stream and cancel every subscription for a tournament that uses healthbars mode on `` always '' . 
  i just ca n't stand it especially on things like zerglings . 
  i am ok with `` damaged '' and `` selected '' . 
  i personally play on `` damaged '' but i am so annoyed by the `` always '' option that before `` damaged '' was introduced i played without healthbars and used alt to see them on demand . 
  the example makes perfect sense to me . 
  it shows how bad iterating using count ( ) is . 
  i had missed the text . 
  in fact this makes me doubt the framework itself . 
  these kind of idioms in python are precisely why i would never want to let non-expert programmers work with the language . 
  when someone asks why choose java or c # over python the answer is : `` i have junior programmers and non-stellar programmers working on the team and creating value for the customer who do not have any idea what tuple unpacking means or does '', 
  not programming, 
  the fact that they do not have these features . 
  or maybe the fact that i have seen how many times junior programmers come to me complaining that their code would not compile when they are trying to do some complete bullshit but luckily the compiler and libraries with proper encapsulation and other safeguards stops them from writing bullshit code . 
  of course they do manage to write bullshit code but it is still worth to reduce the cases by 30-40 %, 
  no , i have experience with actual juniors . 
  of course if the juniors who work with me were on the level of google 's juniors that would be a different thing . 
  also note that i am talking about the implicit unpacking in, 
  a , b = b , a, 
  not about the concept of tuples in general, 
  still more strict than python . 
  let alone that this is only bad code because it is slow and when comparing java against python i will bet on java winning on performance even for this specific bullshit code . 
  python does n't even have access modifiers so yeah in a way it is a language thing . 
  dynamic typing is part of the problem when you are dealing with less experienced programming but the compiler does check a lot of other things . 
  my main problem is the amount of advanced idioms python has . 
  what is ssl10 ? 
  secure sockets layer was replaced by transport layer security after version 3.0, 
  the quality of the juniors or even mid-level devs in the company i work for is what we can get . 
  do we want google level juniors ? 
  we do but we would n't be able to get them even if we could afford to pay the same as google ( we ca n't ), 
  i am not against the idioms i just think that they are magic to many developers . 
  maybe my perspective is shifted because of the local market but looking at communities like stack overflow my impression is that these idioms are magic for like 30 % of people who can produce value as devs . 
  i am not talking about the negative developers you want to fire . 
  i am talking about people who can contribute to the product and be a net positive . 
  you do n't want to get rid of those , you want to put them on the right tasks . 
  i also think that the industry agrees with me evident by the fact that java and . net are the most widely used platforms out there especially in bigger companies . 
  the industry might not think this way but it feels that it gets better results this way . 
  sure the hottest startups can hire the best devs and they can use python or whatever and do great things but that boring enterprise could n't do it no matter the salaries or the tech they use since they are doing accounting or inventory management or something so they have to get the average devs and they are more productive and generate less errors with java and c # than with python . 
  as for the convention i do know it exists but in one language it is easier to ignore it and in another it requires a lot of skill . 
  anyone who could change a private field via reflection in java would know a lot better why this is bad ( even then some people never learn but at least make them jump through hoops ), 
  i am very annoyed by single purpose units that blizzard tries to push into a very specific role and changes them every time someone discovers a creative way to use them . 
  for example i was very annoyed by the changes to the ghost ( people started using it for rushes and as main army and blizzard were fast to put it back into its role of spellcaster killers by nerfing snipe ) . 
  i voted the reaper , mothership and swarm host for similar reasons . 
  i dislike how the strategic decision to build a unit that has very obvious strengths and weaknesses was reduced to the mechanical speed of activating a shield . 
  i already feel that my iq will be reduced when i play lotv . 
  and no , i am not joking , i really dislike the whole `` micro over strategy and tactics '' direction they are taking with lotv . 
  while i agree that micro is a part of tactics , mechanics is n't . 
  strategically and tactically it is the same if a shield is auto activated or if a player activates it but one requires clicking and the other does not . 
  of course you have to decide when to activate the new shield as i assume that there will be some cooldown but i do not hear anyone talking about this decision only about the differentiation it will provide for mechanically stronger players . 
  btw medevac boost is the same stupid ability . 
  if it had auto cast it would be enabled when travelling and disabled right before the drop . 
  after all who wants his medivacs to travel slowly across the map ? 
  in addition making the immortal similarly good against various types of units means that it will be less important choice strategically . 
  after all if you have good micro it will be good against most units so why bother thinking about it ? 
  why is it important to reduce them ? 
  to give a somewhat more popular example - java has this feature . 
  weeeell ... no . 
  or at least not exactly . 
  no mainstream language is superior to c # , period . 
  also the core . net libraries are one of the best ( certainly better than java ), 
  in my opinion every skill should have an auto cast with proper ( configurable ) default . 
  even psi storm should have an auto cast where the templar casts it if a unit comes nearby . 
  this is how we remove `` stupid '' micro from the game . 
  for example i am sure every queen will have that inject on auto cast simply because it is mindless skill to waste time and promote mechanically superior players . 
  i never said that the language will save me from * every * bad decision . 
  however it saves from * enough * bad decisions to justify choosing one language over another . 
  after all i do not want code reviews that last whole week . 
  they are if you care about strategies and mindgames over mechanics . 
  would you please remove your text when quoting me . 
  my point is that i would n't have to do anything that can be done by a program . 
  the compiler does a code review for a large number of incorrect code . 
  maybe but as i pointed out the industry agrees with me by using java . 
  i mean even if you want the jvm because of all the libraries and the performance of the platform you would n't choose the java language unless you see value in being conservative . 
  and you can still average 300 apm per minute by stutter stepping marines . 
  it may reduce your iq but i guess you would n't care since stutter stepping is a masterful display of valuable skill . 
  did he watch starcraft or some inferior game ? 
  the industry did choose php but it did so the other way around . 
  it was junior programmers making small websites who got popular rather than bosses imposing the language on juniors . 
  lol and d3 ... 
  so he deserved it , 
  i would argue about scala 's superiority but i definitely do not consider it mainstream . 
  in addition python and ruby barely squeeze in as mainstream . 
  anecdotal evidence based on people i know . 
  btw my java dev friends point to this as a reason for java 's conservatism and note how they are probably going to ban lambdas when they adopt java 8 in 3 years . 
  i do not question the usefulness of the concepts or the quality of the python language . 
  i just would n't choose it for projects where the team is average ( i.e. 
  consists of a couple of good programmers , some regular nine to five programmers and a couple of complete noobs ) because i think it increases the chance that the project will fail . 
  if the project is not that important i may let them try for the learning experience if i do not have such a project they are free to use it on their own . 
  btw c # contains a good deal of python 's concepts in much safer and non-magical ways . 
  also has private . 
  private is veeeery important when working with junior programmers in my experience . 
  i 'd better do a study at our company and see how many people know what a tuple is and come back then . 
  what results do you expect ? 
  watching streams for inferior games , 
  unless you are very annoyed by old graphics go play it . 
  alternatively watch the story videos on youtube ( there is story in the missions and in the cinematics ),
