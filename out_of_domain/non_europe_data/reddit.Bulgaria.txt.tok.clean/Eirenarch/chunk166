  why would i do something in dart if 100 % the same thing could be done in c # . 
  now with typescript it is different since it does not bring a standard library , produces human readable js , can consume js libraries with 0 effort and you can just paste a js snipped in your typescript and it will work . 
  these are real advantages and you can take them over a nicer language if you think it is worth it . 
  with dart i do not see any possible advantages . 
  if the quality is higher it would be a good reason to choose it . 
  i am not saying that this is the case just that a project can do the same thing and be of a higher quality . 
  which is the only reason a sane person would touch js . 
  i bet someone is working on a plugin after reading this comment . 
  we 're here to downvote the people who wo n't bow down to anders ( hallowed be his name ) . 
  burn heretics !, 
  web forms were supposed to abstract the web bullshit away and it was a great idea . 
  too bad the web changed underneath it . 
  you really do n't need to write any serious js or use a js library if your goal is to build a wikipedia in web forms since the abstraction fits perfectly the website model of the first half of the 2000s when both wikipedia and web forms were created . 
  sharing code between the server and the client sounds like a good reason . 
  he said it is a bad mobile design . 
  i said that it does n't matter and it is still the greatest thing for browsing code i have seen on the web . 
  github which was provided as an alternative and made / u/cowinabadplace happy is inferior . 
  i do n't know about my fanboyism but i do use these services at work and i am far more effective with the reference source website than with github . 
  i know because i have used both . 
  of course i do not work on mobile . 
  you mean points 1 and 2 ? 
  i would agree if that was the only project to compile c # to js but i know two other that are open source . 
  honestly i think dart is practically dead now that they 've announced they will not integrate the vm into chrome . 
  in my experience web forms and silverlight did not suffer from significant performance issues . 
  let alone that neither of these require or promote chatty apis . 
  sharing data structures is useful since desync in data structures causes a lot of time to be wasted on debugging to find a trivial error with a property name . 
  there are other useful things that can be shared most notably validation . 
  i am not . 
  i only claim that something is not designed for mobile does not make it brain dead since it is the best in its class for its intended purpose . 
  but even then why would it censor `` race '' . 
  i have never heard anyone using racial insults containing the word `` race '' . 
  ah the viewstate that has n't been a problem since 2005 when people learned what it did and how to disable it ... ( let alone that it was disable by default in 2010 ), 
  so who is gon na build that ? 
  btw i am much more interested in the opportunity to bet money on your game and turn esports into a kind of poker via btc . 
  so what are these kind of questions that put senior devs on the spectrum ? 
  the question seems reasonable to me . 
  not superstar google algorithms level but non-trivial and real world ( in fact i needed to do something pretty similar to this in practice ) . 
  i certainly would n't expect a junior ( meaning less than 1 year experience ) developer to handle it unless he is either coming from top university or has participated in algorithm competitions . 
   the purpose of async/await is to allow you to write code which can easily continue running while some io-bound operation executes, 
  i am sure you understand the concept but i think this statement is incorrect or at the very least will be very confusing for someone who does n't already know what async/await does . 
   it 's just a proxy for some real merits , like stable and elaborate tooling , wide community , availability of support , etc. 
  that 's what maturity means . 
  i would add `` know-how '' to this list . 
   asp.net is an edge case to this conversation . 
  microsoft loves to confuse shit like this . 
  even then , i can guarantee you that they 're leveraging some later, 
  hacks to make it lighter weight on their front end engines . 
  what does this even mean ? 
  what does it mean to `` confuse '' a technology ? 
  can someone provide code sample ( ready for benchmark ) where the optimization is faster than the normal code . 
  i could n't come up with one that works in practice . 
  edit : my follow-up question regarding my inability to produce a code sample where the optimization matters . 
  - http://stackoverflow.com/questions/29378837/code-sample-that-shows-casting-to-uint-is-more-efficient-than-range-check, 
  yes , according to the wired article it was officially announced that foundationdb wo n't be a product anymore . 
  maybe it wo n't be developed either , who knows what apple does with the company . 
  it would be really strange to cut the community edition half an year after they introduced it . 
  i think the new name for the metro , do n't call it metro , modern , universal apps is now `` windows apps '', 
  which is probably the biggest change . 
  i actually love the settings sync that comes with logging in . 
  link to source article instead of shitty / . 
  submission - http://www.ifross.org/artikel/4-shifty-details-about-microsofts-open-source-net, 
  the beautiful 2 vs 2 tournament we witnessed last week proves your description of 2 vs 2 wrong . 
  my experience as a lower level player is pretty much in line with what the tournament showed . 
  2 vs 2 is fun , possibly more fun than 1 vs 1 . 
  another brainfuck skin ? 
  the ting 2 vs 2 tournament did not feature hellion / ling at all in the later stages so i guess the strategy is not that op . 
  what it did feature a lot was terran bio + phoenix but even that was countered beautifully several times . 
  in addition i do not understand why people think all race combinations should work . 
  there is no need for that . 
  that 's like requiring that a soccer team of all offensive players should be equal to a balanced team . 
  and finally if the community supported 2vs2 more then things can be done to balance race combinations . 
  for example they can add a mechanic for team games . 
  that does not exist in 1vs1 similar to terran being able to heal zerg . 
  then the mechanic for certain combos can be nerfed or buffed accordingly to balance 2 vs 2 without affecting 1 vs 1, 
  so boring :(, 
  what exactly is the difference between the old external modules and the new es6 modules ? 
  will this support be limited to es6 . 
  i understand that the idea of ts is to be compiled to human readable js but i kind of feel like at some point people will need something else to support legacy browsers . 
  it would be annoying to have to plug 6to5 into the tool chain just to target older browsers especially since the es6 output of typescript will be human readable . 
  that would be great !, 
  ah the good old days when the game was a strategy game and not muscle memory competition . 
  and is web scale and node and mongodb and ... 
  and also can use js snippets from the internet directly without risk that some idiom will be annoyingly hard to reproduce in your chosen language . 
  also you can sell it easily to superiors and the team . 
  for example i just sold it in our company promising to only use the module syntax and lambda functions . 
  i will secretly add types later of course , 
  to be honest `` because microsoft '' is an absurd way to make tech decisions . 
  i actually think `` bet on microsoft '' has a greater chance of success on average although it is obviously stupid as well . 
  except that stopgap can in theory go on forever . 
  with 1.5 it will be compatible according to a recent blog post . 
  i am not using the real thing because it is not in the browser yet . 
  so do you work for a non-profit that tries to promote the open web or for a company that tries to make money ? 
  because if it is the latter i do n't see how anything you wrote ( be it true or not ) should affect the decision to choose certain tech since it does n't include anything about making money . 
  the article misses some important points like google building typed vm for chrome using syntax which will be very close to ts . 
  i think there is very good chance that es7 is pretty much typescript, 
  then look at typescript as a kind of shim, 
  the language will only disappear if there is no need to evolve js anymore . 
  i do n't know about this ... the `` oh , nice things '' attitude towards ms products has always worked well for me from financial and fun point of view ( meaning i am being paid and use nice tech ), 
  100 % agree . 
  i ca n't understand why they do n't test that publicly .
