  we never gave 2 vs 2 a chance . 
  maybe this is the problem . 
  i do n't see how we could do it either . 
  but we did . 
  i personally blame the tournament organizers . 
  probably they decided to `` focus '' . 
  also note that at the time when sc2 came out 2 vs 2 had already been purged from sc1 by the elitists so there was nothing to carry over . 
  and regular people do play 2 vs 2 . 
  they play it today . 
   would 've been better if he got fired, 
  imagine how many posts you would see if he got fired , 
  while i do not thing that sps are evil ( i think they were overused before and underused now ) this is valid concern . 
  after all debugging and understanding c # is easier for practically all developers than debugging and understanding sps . 
  the tools are also better . 
  we should n't underestimate the importance of these when choosing sp vs main language code, 
  well ... the article is bullshit . 
   i 'm pretty sure that scala.net is abandoned by now . 
  did n't they have problems with generic variance and reification on clr ? 
  seems like the author imagines they had problems with the clr not being open source . 
  i disagree with him on the abortion issues and in general i am undecided on the palestine issues but you really ca n't expect to find a politician you agree with 100 % . 
  or even a person you agree with 100 % . 
  in a democracy what you do is assign each issue weight and vote for the politician who gets the most points . 
  i know that if i was an american rand paul would get by far the most points in my book . 
  this is not how it works . 
  if you vote for someone even if he does n't win or especially if you know he wo n't win you are giving information to the system that you care deeply about the thing he stands for . 
  therefore you create an incentive for whoever gets elected to shift his positions slightly towards your position . 
  i would n't support him because he supports bitcoin . 
  the relationship between my libertarian views and my support for bitcoin is the other way around - i support btc because i am a libertarian . 
  if i had to trade the right of abortion for lower taxes , free markets , legalized drugs , less state spying and less censorship i would do it in an instant . 
  i guess they prefer money to viewers ... go figure !, 
  but what if the actual goal is to ruin their day . 
  i mean you are not good at the game anyway . 
  this is not simply a joke . 
  javascript : the good parts is supposed to be mainly about how to avoid the pitfalls of javascript and how to fill in the missing things . 
  in c # the solution is often directly using the language construct . 
  please follow c # convention :, 
  ! it ? . ishated, 
  in c # we call it `` monadic null chaining '' because we want to sound clever . 
  on friday what year since this feature has been announced for a while . 
  sorry , i meant `` monadic '' . 
  will fix . 
  that 's cheating . 
  you need to do it in css2, 
  the scope of this debate in the usa baffles me . 
  how many voluntary abortions are there per year in the usa ? 
  edit : hmm just checked . 
  more than a million per year . 
  the number does seem pretty high . 
  i doubt rand paul is against contraceptives and sex education . 
  my stance on abortion is simple : is anyone obliged to do anything so another might live ? 
  my answer is definitely no . 
  lifting the ban on buying polaris missiles will bring the costs down due to economy of scale , 
  did you ever think that it may work the other way around . 
  bitcoin is not libertarian of course but i care more about libertarian ideas than bitcoin . 
  i support bitcoin because i see it as an implementation of these ideas . 
  the right to control your property ( money ) is the most important individual right . 
  without it you lose every other individual right . 
  so by using dtos i am using cqrs ? 
  this thread got me thinking what i would point out as a mistake in the language that is not purely a result of missing features in the earlier versions ( like the presence of ienumerable or the mistake of covariant arrays they copied on purpose from java ) . 
  i could think of these :, 
  - attribute initializer syntax is different from object initializer when setting properties . 
  while attributes come from c # 1.0 and object initializers come in c # 3.0 the syntax for attributes is inferior and therefore can be considered a mistake that caused inconsistency . 
  - anonymous methods should not have existed . 
  lambdas should have been added directly, 
  - delegates should have been multicast by default but that is more of . net than c #, 
  - add/remove for event accessors were probably overkill but that 's pretty minor . 
  ... and that 's pretty much it, 
  because without the right to control your property you can lose control over your body for economic reasons . 
  i am pretty sure win7 ships with ie8 which means that ie8 will be supported for the lifetime of win7 . 
  interesting . 
  they ca n't change the license retroactively can they ? 
  although if the label on the top of the page is correct then this has been documented from at least 2014 . 
  there are legit uses of async/await that involve threading . 
  the website is down so i can not see what examples they give though . 
  this !, 
  been there done both  now i know and life is good . 
  the main problem is when you are building an app and want to do io when the app loads . 
  the methods you need to override are synchronous but the apis are asynchronous so you have to rearchitect your app or use some form of wait, 
   i was working on a greenfield application and my webapi developer was just blindly exposing all my xxxasync service calls as synchronous . 
  meaning he was just wrapping them in a sync method and calling wait ( ) ? 
  it is not obvious but i think this is in conflict with the popular opinion that the more macro the better . 
  i disagree with this popular opinion from the start . 
  poor article . 
  he does use threads the wrong way . 
  `` everyone '' ? 
  most people will move to heroes of the storm , overwatch or something similar . 
  i know i will never ever again play competitively a game that lacks a `` find match '' button . 
  honestly i 'd rather play tic tac toe instead of going through the pain of arranging a starcraft 1 match again . 
  i guess you can have an async loaded event but not an async constructor . 
  mmmm ? 
  there is a well-known way to emulate it using method hiding, 
  i ca n't understand why people downvote this . 
  it is very legitimate issue . 
  no , unless you want to work in a windows shop or run your own business . 
  selling c # is not that hard but after all you will probably want to make money using it and even if you do web the company/customer will probably use a windows environment . 
  i disagree . 
  people do n't play sc2 because it is not a team game . 
  it does n't matter how hard the game is because it is as hard to your opponent as it is to you and even if there is skill cap in lets say lol 99 % of the players are not there so they should n't care . 
  the problem is that sc2 makes you feel the loss while in team games you can contribute to the win even if you are bad . 
  you may have a point but then quake exists - an fps game that is in precisely the same position as sc .
