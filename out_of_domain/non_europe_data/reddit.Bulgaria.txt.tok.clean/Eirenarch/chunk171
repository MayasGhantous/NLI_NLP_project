  it was the king once , is hard ( i would say it has higher skill cap than sc actually ) and was smashed by team games . 
  how did you come up with that $ 20 number ? 
  it seems to me that it requires greater precision in every input the player does . 
  for example in sc it does n't matter much where you attack-move as long as it is in the general direction . 
  i am also very impressed with things like mentally tracking the timings of multiple items while simultaneously building an algorithm to take them all . 
  in addition in quake small mistakes manifest in great differences in the results . 
  for example if a pro player in sc2 plays against a masters player chances are the masters player will be able to kill a building or even an expansion . 
  in quake the masters player will probably have a negative score . 
  do n't get me wrong i do think quake and sc are in general pretty similar in these aspects but my experience makes me * feel * like quake is more unforgiving . 
  you think people like changes ? 
  because i disagree and think people actually hate them . 
  now of course if there is an imbalance they may like the change but in general they do n't . 
  archon mode will be extremely frustrating . 
  i base that on my team melee experience in brood war . 
  promoting team games is a much better option . 
  your definition of `` mainstream '' is quite different from mine . 
  ml , smalltalk , ada and eiffel wo n't make the cut . 
  i agree but in general there is a lot of value in making something mainstream . 
  in my opinion it is both harder and more important to make something mainstream than to invent it . 
  this is why society rewards the person who manages to make something mainstream more than the actual inventor . 
  ford did not invent the automobile and steve jobs did not invent the touch screen but they got filthy rich because they made the corresponding inventions usable and/or affordable . 
  same with language design . 
  making the feature friendly enough so the working-class programmers can adopt it is hard and a great contribution that improves the lives of a lot of people . 
  yes , but i have yet to receive a headhunter message/call with an offer to work with . net in a non-windows environment or even meet a person who works in such an environment . 
  if you run . net at home you certainly can use non-windows but if you are looking for non-windows employment better drop that c #, 
  yeah , as i pointed out i just feel this way . 
  of course it is entirely possible that i am just better at sc than at quake but at least i think the fact that quake punishes mistakes more severely is objective . 
  that did in fact happen . 
  there was a pro scene till about 2 or 3 years ago when iem and dreamhack dropped the game . 
  today there are still tournaments for reasonable money but not enough to support a pro scene as far as i know . 
  honestly i do n't see why anyone can be sure sc wo n't have the same fate . 
  i really see the cases of quake vs cs ( and later other team shooters ) and sc ( even the whole rts genre ) vs dota as quite similar . 
  the team game just wipes the 1 vs 1 game . 
  my impression from reading mailing lists , blog posts and similar sources of language design wisdom is that if you want to have a high quality language like c # it is never that simple . 
  if you just put it in the language you end up with php . 
  but then again i never designed a language so maybe i am wrong . 
  most people do n't use readonly when they should . 
  i believe this is part of the reason . 
  of course normal code usually has more variables than private fields so it would be worse . 
  either that or the reason is that quake is not a team game . 
  note that all games you quoted are team games . 
  this is my hypothesis - team games win . 
  well in any case quake is even less team than sc2 . 
  btw when i say quake i do n't mean quake 1 but the quake line which is currently at quake live, 
   well sure , but without generics strictly invariant arrays would have made the language hard to use . 
  how do you create custom collections ? 
  linked lists ? 
  covariant arrays means you can cast string [ ] to object [ ] which is wrong . 
  there is no problem with collections . 
   you mean delegate syntax . 
  lambdas and delegate syntax both create methods and classes as needed for the closure logic , and convert into delegate types . 
  lambdas can convert into expression types as well . 
  the feature is called anonymous methods and i know all that . 
  i do n't get your point . 
   well , add/remove is all an event is . 
  besides that , it 's just a field of delegate type . 
  an event is to a delegate field what a property is to a field in general , really . 
  that 's not true . 
  event is access modifier that can only be applied to delegates . 
  add/remove makes it equivalent to properties but more often than not it is used without add/remove . 
  i am sad that sc2 does not abuse the sweet point of small team games and combine the two kinds of gameplay . 
  i am sure it would have been , though in my experience 4 vs 4 is overkill for both technical and gameplay reasons ( the game could be changed but it would be very different ) . 
  however there should have been a push for 2 vs 2 or 3 vs 3 . 
  note that big teams has its logistics problems . 
  i am surprised companies do not try to target the space between 1 vs 1 and 5 vs 5 . 
  i do n't mind team games but maintaining a 5 players team is something i can not do and i wo n't play with random guys . 
  true but the general idea still stands . 
  i do n't know how people can play random teams . 
  i just ca n't stand it . 
  on the other hand if there was a competitive scene for 2 vs 2 i 'd probably jump to that game from the 1 vs 1 sc, 
  yeah , while eating spicy food with chopsticks ... 
  the problem is that cheaters are not that stupid and they will figure out in a couple of hours where they are . 
  i think the community and tournament organizers stomped 2 vs 2 almost on purpose . 
  people constantly badmouth 2 vs 2 . 
  i have heard artosis advertise gstl on the gsl stream with something like `` it is a team league but it is serious 1 vs 1 not some joke like 2 vs 2 '' . 
  it is a kind of self-fulfilling prophecy . 
  i support the idea of cheaters ladder i just do n't think it will solve the problem . 
  i will be happy to know that at least for a couple of game the cheaters experience the frustration . 
  are we supposed to post questions in this thread or as a separate thread ? 
  the obvious answer . 
  they will answer this questions at build , 
  the support came to c # at the same time ( even earlier if you count ctps ), 
  i listen to the show regularly and ca n't recall them saying that . 
  i wonder how long will it take for people to learn that static/dynamic is not the same as strong/weak . 
  i hate this so much that i became the asshole correcting the speaker at conferences when he uses `` strong '' instead of `` static '' . 
  well there is roslyn , core clr and msbuild . 
  the modules are released . 
  `` as much as possible '' would mean that the team does nothing but port vs for the next too years . 
  thanks , but no thanks , i 'd rather get new features , performance improvements and bugfixes . 
  to be honest i never got to be with that girl :(, 
  at least xna has a kind of replacement in the form of unity . 
  no i meant unity as the king of the managed game development . 
  as i see it xna was the way to develop games in c # more than anything else . 
  now the way to develop games in c # is unity . 
  web forms will be supported in the form of asp.net 4.6 . 
  it is certain that it will not be part of asp.net 5 . 
  how long it will be supported and in what form is unknown and probably depends on the interest in the framework . 
  yeah , i was with her sister silverlight for windows phone for a while . 
  i liked her . 
  leenock does look as a physically smaller version of july .
