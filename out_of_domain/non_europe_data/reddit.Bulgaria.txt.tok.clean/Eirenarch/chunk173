  the ideal programming language is already invented - lisp . 
  the problem is that the world is not ideal so lisp is not very suitable . 
  we have to use less ideal and more practical languages . 
  that 's of course fine . 
  i also prefer 1 vs 1 or at most 2 vs 2 but we ca n't close our eyes to the reality that popular games are team games . 
  also i am sure the ratio of people who like 1 vs 1 starcraft to people who like 2 vs 2 starcraft is not the same as the ratio of prize money and tournaments for 1 vs 1 to prize money and tournaments for 2 vs 2 . 
  2 vs 2 and 3 vs 3 are severely underrepresented in our scene and that is damaging and drives potential players away and alienates existing players . 
   in c # , int is not a primitive type but actually an alias to the int32 class, 
  the part where int is not a primitive type is technically incorrect . 
  although the term primitive in c # is somewhat different than the term primitive in java and it is certainly much less important what is primitive type and what not the c # spec does contain like 2 mentions of the word `` primitive '' . 
  they define `` primitive type '' to be a type that has direct support in the underlying hardware ( i.e. 
  int operations are translated to hardware instructions ), 
  scala is fine but the employment options not so much especially for junior devs . 
  that would be true in 2005 but c # today has a lot of important things not found in java, 
  that 's pure bullshit . 
  vs for universities has been free for as long as i can remember . 
  i am pretty sure the university where i studied could not have afforded licenses and they were giving keys away if you ask . 
  why do you care ? 
  mono can do that and ms are working on a project called . net native that will use the c++ compiler backend to generate native code . 
  the project is not done yet but it is an announced production project with publicly available beta and not something for research . 
  in fact for many years high-level sc1 leagues included 2 vs 2 decider match . 
  like 4 1 vs 1s and one 2 vs 2 . 
  yeah that might be a problem in some places but then the express versions are free and no microsoft contact required ( except an account ) since 2005 . 
  my stance on exams like this is the following :, 
  - the knowledge required for the exams is usually the type of thing you consult the documentation or google for . 
  it is useless in practice . 
  - it is faster to learn from braindumps than to learn the actual material . 
  - any person who did do the actual learning to pass the exam would learn more useful stuff if he learned something else . 
  - therefore i do n't want to hire any person who was not practical and studied for the certificate instead of using braindump . 
  use your time to learn actual c # programming ( or another skill ) rather than studying for the certificate . 
  even if you manage to get the certificate you will have memorized information that is almost useless for practical purposes . 
  probably they want to be compatible and useful for non-c # consumers, 
  can you do decomposition ? 
  this is why people choose c # . 
  the best option for being closer to scala while being employed , 
  depending on where you are . 
  i have no doubt that in the valley or in london there are options ( although are there options for junior devs ? ), 
  but where i live ( 300k city ) there is like 1 company and they are doing mostly java anyways . 
  there are a lot of options ( ~ 20 different companies ) for c # for example . 
  by plenty how many exactly do you mean ? 
  so you mean it is more than 5 ? 
  sometimes things are not that connected or at least not worth creating a separate type . 
  for example if we get a page of items from the database and the total count i do n't feel like writing a type for that . 
  it would be cool to be able to write, 
  ( items , count ) = getdata ( ) ;, 
  i mean the number of companies . 
  the number of devs is not that interesting since in practically every tech there are more jobs than candidates . 
  but if you have more than 10 options in budapest i am impressed . 
  seems like bulgaria is boring :(, 
  yeah but i really want to avoid returning values through arguments . 
  also exceptions as bad as they are are much better option than error codes . 
  i expect the eu to ban openbsd or at least flag openbsd users as potential criminals if it has determined openbsd is good at security and cryptography . 
  they make it better by virtue of the fact that it is impossible to ignore exceptions . 
  that is very important . 
  at least they crash , 
  oh come on !, 
  germany is just as bad as the uk . 
  i suspect france too . 
  the other countries may be too small to have the resources for mass surveillance but the spirit of bureaucracy and regulation in the eu extends naturally to reading people 's communication . 
  i wish they 'd change the name to something like tracked null variable or something since nullable is somewhat confusing . 
  that 's what they want . 
  first they confuse you then they will embrace you then they will extend you and finally they will extinguish you . 
  that 's their ceee strategy . 
  was it linux or open source ? 
  because gpl in particular has a kind of cancer-like characteristics , 
  if they slap you with money the solution is easy - just save some of the money for a while and then you can leave . 
  my girlfriend ( 7 years experience java dev ) was in an interview like that once . 
  she scheduled the interview in the after hours and when she arrived she noticed people where there still working . 
  she asked why and the interviewer said that they were still there because of her interview ( wtf ?!? ) . 
  he later asked if people were working overtime how would she be able to leave , would n't that be betraying the team ? 
  she immediately replied that she does not work overtime , period . 
  he then tried to shame her or something telling her that this means lack of ambition and dedication . 
  facebook and skype were blocked in the company . 
  honestly she was affected when she came home and asked me if she was lazy and bad developer . 
  at least she did n't consider working there for a second . 
  i wonder how the interviewer felt being blocked like that . 
  btw is it often that developers with years of experience in tech that is in demand have problem finding employment ? 
  i was let go once ( this happened in another company office ) called devs in my office to tell them that i was fired without saying anything else and had recruiters calling me 15 minutes later because obviously someone leaked the info . 
  i had a new job 2 weeks later . 
  it turned out that this new job was better paying , more interesting and had better environment . 
  i guess this is only true if you do n't want reduced payment but if you are unemployed you will take the cut . 
   i know that nowadays we could afford 8gb ram very easy ( or maybe more ) , but ... 
  but what ? 
  your sentence starts with the counter-argument for everything you said after that . 
  why ? 
  so some dev decided to implement a feature instead of optimize memory usage . 
  basically he decided to do something that makes it better for the user rather than something that the user does n't care about because the user has a lot of ram . 
  the article claims that patents of large companies are too vague but does n't give an example of that . 
  i find it hard to believe that a company like microsoft , motorola or apple which develop mobile devices and software for years would not have meaningful non-vague patents . 
  in addition it makes no sense to retroactively invalidate these patents . 
  companies made investments ( like 12 billion motorola ) to acquire those patents . 
  maybe lawmakers should set higher bar for future patents but current patents should work until they expire according to the current law . 
  for someone like me who struggles greatly to build usable , let alone high-quality ux i honestly think this is good enough to be patented . 
  it is easy to think of something we use every day and forget that someone had to invent it . 
  then it is samsung 's fault for failing to point to that prior art . 
  i do n't question that there are such patents . 
  i question the claim of the article that big players do not have valuable patents and only have obvious and broad patents . 
  as someone who lives in a country with law system without precedents i do n't see precedents as a `` problem '' i see them as a very good thing . 
  precedents mean that if a law is bad it should be changed or qualified by the lawmaker . 
  also i do n't care about the examples of bad patents .
