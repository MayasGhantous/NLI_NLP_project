  i do not doubt that there are a lot of them . 
  i question the premise that there are no good patents in the arsenal of apple , google , motorola , ibm or other large companies . 
   and if there 's ambiguity in law , why should n't the lawmakers disambiguate ? 
  if you let them get away with sloppy lawmaking and have the courts figure it out , they get lazy, 
  as i see it the whole idea of precedents is to force law makers to resolve ambiguity that resulted in bad precedents . 
  bad rulings with precedents put more pressure on the lawmakers since they are guaranteed to repeat . 
  if you have a bunch of good patents it does n't really matter if you also have thousands of bad ones since you can block the product anyway . 
  after all a single patent is enough to block a product . 
  maybe . 
  however change like this only makes sense for future patents . 
  strange . 
  when i try to make the same point i get downvoted because supposedly apm is the manifestation of skill . 
  we may theorize the existence of dark matter redditors . 
  they only upvote or downvote but do n't comment . 
  the dark matter redditors support your ( our ) point of view . 
  sure but we are talking about price here . 
  they have cpu , gpu and the new processor so obviously it is more expensive than cpu and gpu only . 
  no he really is talking about pixelsense . 
  he just wants to sound smart . 
  it made me buy a console for the first time in my life . 
  i loved the two games i played ( adventures and dance central ) . 
  i did n't think it was bad at all . 
  so how do you think ms got these patents they use to milk android makers these days ? 
  i guess they can pump the graphics to choke any gpu if they really want to , 
  there is one important difference though . 
  with surface there was competition already on the market for years . 
  hololens is pretty much pioneer technology or at least launches with the pioneers . 
  certainly but what is considered consumer grade depends on the competition . 
  i believe that if surface was released before the ipad nobody would consider it not ready . 
  true . 
  i am rooting for the hololens , 
  i understand that they are not equivalent but there are certainly overlaps . 
  after all if you remove the type cover you get a tablet . 
  so do you think surface 1 would have failed if it was released before the ipad ? 
  not that it is easy to test but i think it would have been a success as it was good enough to be a hit if there was no competition . 
  well assuming libertarian political views do you think there is a better candidate and do you not agree that rand paul is a net positive ( i.e. 
  he should be supported rather than ridiculed ) ? 
  yes we know and based on the context and current product names it is easy to infer we are not talking about pixelsense, 
  to be honest the com-ness of winrt is largely hidden from the dev ( at least if you are doing . net ) . 
  i have a couple of non-trivial apps in the windows store and i never needed to know it was com underneath the apis, 
  in the days of my youth , i was told what it means to be a dev, 
  now i 've reached that age , i 've tried to do all those things the best i can . 
  no matter how i try , i find my way into the same old bugs . 
  good tests , bad tests , you know i had my share ;, 
  when my colleague left for another job ,, 
  well , i still do n't seem to care . 
  seventeen , i fell in love with a tool as cool as could be ,, 
  it only took a couple of years 'til it did n't seem cool to me . 
  it promised it would squash all bugs as long as i had tests, 
  but when i tried it failed cause i used that damn js, 
  the search does n't seem to work for me, 
  i just assumed it was my username, 
  i believe with winrt they generate . net bindings with a tool . 
  this was the whole point of winrt . 
  how can you be in college if you have n't finished school ? 
  explains the 12 hours training the pro teams do . 
  uhm ... that makes no sense . 
  it is recommended to return the task without async if you can . 
  people often do this because they want to call an api without changing all their existing code to be async . 
  in additions there are places that simply do not support async . 
  maybe we want to call the async code in a constructor or are using renderaction in asp.net mvc which does not support async . 
  in my experience more often than not people do know what they are doing when they stick a configureawait ( false ) on their methods . 
  because marking a method as async means it contains await and the compiler should create a state machine for that await . 
  if you already have the task at hand there is no need to unwrap it using await and then wrap it again . 
  i love the part where he gets to build things that help people . 
  i bet he did more of that when he worked as a programmer even if he did n't see it . 
  unless of course he worked at google then he spent his time building more personalized ads to shove in people 's faces . 
  you know you can work on someone else 's farm , right ? 
  you can learn to be a mechanic for about the same time you can become programmer i guess . 
  also why do you expect anything but low wages if you want to work on a farm ? 
  do you have any data to support this claim ? 
  i seriously doubt programmers live shorter than the average person . 
  i have seen an article posted here on reddit with a proposal for the community to abandon python 3 and continue the development from 2.7, 
  well people still hated ms when they introduced async/await . 
  that 's true but making a feature mainstream seems to be at least as hard or harder as actually inventing it . 
  there are a lot of challenges involved and a lot of creativity in overcoming those challenges . 
  for example in c # 3.0 they renamed the traditional functional names like map , filter , foldr , etc. 
  to sql words like select , where , aggregate . 
  this may sound like a joke to scientists and enthusiasts but is quite important in the industry . 
  this guy wins the subthread . 
  java clone with properties , value types and unified type system instead of java 's half-assed `` everything is an object but some objects are more objects than others '' . 
  if we add the lack of checked exceptions and reified generics it is beneficial to stop pretending c # was a java clone because the list of really important improvements we must add in order to be honest becomes too long . 
  in fact i claim that the industry languages would be more than 50 years behind the research curve if it was not for c # to lead the way by being 40 years behind . 
  in the last decade the other mainstream languages are stimulated by c # 's lead to adopt new features . 
  that most people use python 2 anyway and it would be more beneficial for more people to continue development and abandon 3 . 
  i am describing things that make very real and sensible difference in ease of use and code quality when using c # compared to java . 
  these things make it so that c # does not feel like a clone of java . 
  i do n't really care if they were obvious . 
  i love how blizzard constantly fail with these and have essentially meant the highest league/count/history meaningless while at the same time demotivating players, 
  i do n't get it . 
  so what if it was cropped , he still accused a guy of hacking and saw the proof that he was not ? 
  why does he play random team instead of arranged ? 
  does it have to do with the fact that he is an asshole ? 
  obviously it is not but it is entirely possible that working in a farm is not good for you either . 
  let alone that if you get paid more as a programmer you may get better healthcare and live longer due to that . 
  we feel the need to beat the drum specifically for the kind of people who claim that c # ( for example ) is overloaded with features that are not really needed and they are doing just fine with python ( for example ) and it is better that python does not have that feature because really it is just confusing and bad abstraction . 
  now it is our time to shove it in their faces . 
  well , i do n't know what will happen and honestly i have no investment in python so i do not care much . 
  still i did a tutorial on python 3 and was annoyed that i could n't use it with the materials on several courser courses because for some reason they were using python 2 . 
  my impression as an outsider is that python is a nice language but it is terribly mismanaged .
