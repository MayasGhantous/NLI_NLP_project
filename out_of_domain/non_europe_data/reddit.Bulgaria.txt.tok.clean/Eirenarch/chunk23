  did you just call win 8 metro ui an android clone and xbox and kinect a failure ? 
  metro may be a failure ( we 'll see ) but certainly not a clone . 
  especially not android clone, 
  no but calling it an android clone is absurd . 
  if anything the vanilla android copied some metro ideas in 4 +, 
  i dispute calling metro a clone , not its qualities . 
  sorry if i worded my original statement in a wrong way . 
  also gangnam style is coming to dance central 3 . 
  take that wii !, 
  silverlight died because there is no demand for it in ios world . 
  within 5 years maybe but certainly not anything urgent . 
  the runtime will be supported with security patches for many years and the development tools are still part of visual studio . 
  problem is they do n't have anything to replace it yet . 
  it is not like flash is thriving and html does n't have good streaming + drm solution yet . 
  this is bullshit . 
  i bought an xbox just because of kinect . 
  in fact all xbox owners i know bought xbox for the kinect ( admittedly in my country ps is much more popular than xbox unlike in the usa ) . 
  i 've never installed any hacks and neither has anyone i know . 
  the media attention is the only think hackers did for kinect currently . 
  of course in the future this will change . 
  even if you are correct kinect is still great success . 
  i do n't get it . 
  what does your post has to do with developer skills ? 
  if anything market adoption of c # and xaml is better than actionscript and flex . 
  xbox did overtake what it was cloning . 
  believe it or not there are a lot of kinect only games and a lot more kinect enabled games . 
  also silver light, 
  i know they are different but i did not know they were that different . 
  i needed something to compare with xaml and i do n't know how the name of the ui framework for pure flash, 
  but i am not talking about market adoption of the technologies . 
  i am talking about market adoption of the skills that you get when you learn these technologies . 
  if you 've used silverlight then you know xaml and c # and you can use those and find a job even if not a single silverlight project is ever made . 
  although i would consider choosing semantically correct tags in html to be a required skill . 
  any possibility to see blizzard working towards diversifying the map pool with different ( and bold ) layout like air maps including possible balance changes to make these maps work ? 
  missing last frame :, 
  unimpressed flash is not impressed . 
  well for many of us the question of c++ vs c # does not stand . 
  we do n't know c++ ( above university level ) and it is the hardest mainstream language to learn . 
  i second that question . 
  i realize that sharing viewmodels / presenters is hard because too often the uis are too different in terms of features but maybe some base class presenters for the shared functionality would be beneficial . 
  during the time when this was in the terms of service monotouch apps were not only allowed to stay in the app store but new apps built with monotouch were accepted . 
  the original goal had nothing to do with jit , languages or whatever . 
  apple 's goal is to force developers to make apps that, 
  1 ) look native to the ios platform and not generic . 
  2 ) build less portable apps so that there is significant investment in porting to other platforms . 
  the goal is to avoid the case where the ios users pay for the development of the app and then it is deployed to other oss at no cost . 
  if you already know objective c you are probably correct but the objective-c syntax seems so foreign to me that i think the time i will have to invest to become comfortable with the language would pay for 10 years of mono for ios license , 
  i watched a session on portable class libraries where they explained that anyone can create a portable library profile . 
  the mono guys certainly could but i do n't think they have done it just yet . 
  i do n't agree that using signalr is easy . 
  if everything you do is public it is in fact easy but once you need to ensure that messages are only sent to specific groups of clients for security reasons it becomes quite complex . 
  the signalr team decided to sacrifice features ( access to list of connections and other state ) in favor of scalability . 
  i do n't dispute that it was the correct choice but it certainly does not make using signalr easy especially when some other libraries provide this functionality . 
  games are pretty obvious usage . 
  chat is a common example but many systems need chat so it should not be underestimated . 
  it is not like chat is only built for irc clients . 
  notifications for long running tasks is a good application . 
  you can certainly poll in these cases but why do it if you can use more efficient technology and eliminate both the timeout period and the server load ? 
  i 've used signalr to create `` real time '' comments in facebook-like feed . 
  how is that they `` outpace '' the rest of microsoft ? 
  they certainly release somewhat more often but the problems they solve are simpler , more incremental and more isolated than what the windows , office or xbox teams have to solve . 
  this is not e perspective . 
  if you call something a vulnerability you should explain the scenario which exploits this vulnerability . 
  otherwise you can call all functionality vulnerability and claim that the bad guys are creative and will find a way to exploit it . 
  the originally proposed scenario is in my opinion bs . 
  they should present proof of concept then . 
  i ( and other people ) say this can not be exploited successfully they say it can . 
  they should present a proof of concept . 
  their hypothesis is not enough and tracking the mouse movement is not a security breach on its own . 
  tracking the mouse cursor is a feature . 
  tracking it outside the viewport is a bug but not every bug is vulnerability . 
  this assumes that the attacker knows exactly when the user is typing the sensitive info ... on a virtual keyboard . 
  i do n't have ad block but i despise this way of funding things i like . 
  i always try to pay directly when given the option . 
  that 's not `` outpacing '' . 
  that 's being able to release half-products . 
  if ie was released on a chrome-like release cycle many paying customers will be outraged . 
  hell , some corporate users were outraged by firefox release cycles , let alone ie . 
  the fact that asp.net being a web platform allows and even benefits from releasing half-products does not mean that the team `` outpaces '' anyone . 
  i am willing to bet the average wage for a cobol coder will be higher than ( or even double ) the average wage for ruby/js/pick your favorite hot language for at least two more decades . 
  well if you can afford to hire 75 % of the development team of the hot new technology then you are fine with it , 
  so facebook should spend more time building optimized html app instead of native app ? 
  did you read past articles on his blog then ? 
  why not ask the immature developer patrick wyatt ( warcraft i , warcraft ii , diablo , starcraft , diablo 2 , warcraft iii , guild wars i , guild wars ii ) why they chose windows ? 
  ( he answers to comments on his blog and may even write an article about it ), 
  i was listing games he has worked on not examples of windows server code . 
  my suggestion that you ask him in the blog comments is not a joke or sarcasm . 
  i am quite serious and curious what he would say . 
  yeah because the goal is to have 1 browser engine is n't it ? 
  end of all competition , etc. 
  it is especially since it is important part ( touch ) of the web platform that was effectively blocked by apple . 
  they did when the only standard was ie , 
  so it is ok to have only one implementation of the web if it is not ie ? 
  when i was developing web sites i developed in ie ( because of integrated visual studio js debugger ) and for some reason everything worked on ie and opera and i had to fix it for firefox and chrome . 
  then again i did not do anything impressive on the client . 
  for me personally it would have been best if no browser was released after ie6 but claiming that it is ok if webkit annihilates all competition but it was bad when ie did it is pure hypocrisy . 
  neither does a closed source engine as long as the spec is published to the standard . 
  also for competition to exist there must be at least two competitors . 
  we used to have a single browser engine and a single browser called ie6 . 
  why did we destroy that if it was so good ?
