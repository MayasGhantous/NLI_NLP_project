  it spits pure , dynamically typed js as output with no runtime type checks . 
  maybe there are cheats that break the soundness of the type system but i have seen people refer to it as sound as opposed to dart 's unsound type system . 
  i do n't know . 
  i would assume they are closed for wcs points but not for actual participation and prize money . 
  are they really closed ? 
  i had n't heard the word `` sound '' in respect to typing before typescript vs dart debate . 
  i assumed `` sound '' is a type system that reports an error if it is not sure your types are correct and `` unsound '' is a type system that reports an error only if it is sure that there is an error . 
  am i wrong in my understanding ? 
  why would that be the case if a compiler or a jit compiler checks the types in advance and reports errors . 
  for example you pass `` any '' to a function that accepts string the compiler reports an error and forces you to use a cast . 
  alternatively treat `` any '' as implicit cast to any other type . 
  basically what i am saying is do not type check at runtime . 
  ok but if typescript gets away with it how is this the fault of the typing that there is a performance hit when adding types ? 
  other tools should be able to do the same by ignoring inconvenient types at runtime . 
  also google are working on that sound script experiment that is supposed to bring performance improvement from gradual typing . 
  does this mean they are destined to fail ? 
  well if this is true i must say that the new nazi system is incredibly stupid . 
  i just assumed that the dreamhack prize pool ( which incoming koreans are not guaranteed to win ) + travel expenses made it so it was not worth it for koreans to participate where before they were motivated by wcs points in addition to prize money . 
  if the real issue is that they are simply banned then i must say that i am extremely disappointed . 
  basically blizzard have taken from me the opportunity to meet the best sc players and watch them play live when i visit a dreamhack event ( like i did in 2014 and intend to do again this year ) . 
  that couples with the fact that sc events in my time zone will be of lower quality when i watch at home . 
  good job blizzard on the extreme downgrade of my starcraft experience . 
  oh well ... dreamhacks are not ? 
  great explanation . 
  and i am guessing there is no information on which events will be global ? 
  at this point i think this diversity thing has gotten so out of hand that i 'd rather work at a company that declares it wants to build a culture of white supremacy rather than one that declares it wants a culture of diversity . 
  irrelevant . 
  it is political thing . 
  did you run the program ? 
  if you have how is that you missed it does not fulfill the requirements ? 
  this has nothing to do with programming . 
  this is just common sense - if a program does not do what it is intended to do it is not correct . 
  everyone needs a few months to a few years before becoming productive on his first real-world project . 
  go 2 vs 2 go !, 
  any language other than java would solve their oracle problem so they can go with say dart . 
  do you know how to use a debugger ? 
  ( serious question ), 
  go seems to be positioned more as a server language . 
  i like the good old `` john made me do this '' commit message more . 
  not only does it say that it is john 's fault but obviously john was faced with opposition and still forced his bullshit on the team . 
  yeah . 
  also straight . 
  i know i am the problem of the industry but i ca n't help it . 
  i do n't consider myself a racist but i do n't consider a racist to be an insult either . 
  so go ahead call me racist as much as you want , i do n't mind . 
  btw have you considered that for one not to be racist he needs to be religious in order not to be a hypocrite ? 
  i mean if you think man is the product of evolution how is it possible that all races are produced with exactly the same capabilities . 
  for example black people are far better runners than other races . 
  it would be foolish to expect that different races have precisely the same brains . 
  so when your program does not output the right thing you go the following route, 
  - you look at the output and try to make an educated guess how your program executed and what could have gone wrong considering the output . 
  - if you fail at this you go into a debugger and examine the first piece of output that is incorrect and see what is wrong . 
  if it is still not clear you run the debugger again and stop several steps of the program easier to see where a variable changed to unexpected state . 
  repeat until you 've found your bug . 
  is n't it masochistic to prefer otherwise ? 
  not proportional if white supremacist company was one that murdered non-whites . 
  it could just be a company where white people were in charge and non-whites were not hired at desirable positions ( say programmers ) and only in there to deliver lunch and do cleaning . 
  that would be more proportionate . 
  to be honest there are a lot of masochists in the western world lately . 
  i do n't have this problem but i play with my girlfriend which puts us in diamond so maybe it is different on higher levels . 
  however i was not basing my comment on the interest in 2 vs 2 but on the fact that i have 2 vs 2 fun and team melee ( known to newer players as archon mode ) to be both frustrating and meaningless . 
  author here . 
  i look at the article and it seems to me that all of these apply to nhibernate as well . 
  would you disagree ? 
  also my experience with nhibernate has been much more miserable than my experience with entity framework mainly because the nhibernate linq provider seems to be a kind of cruel joke and i tend to use linq extensively . 
  i guess if one chooses to go for hql or the queryover api things might be better . 
  i am pretty sure on average they are all better long-distance runners . 
  the colonial slave past thing may be true for short distance runners but the best long-distance runners are often from african countries . 
  i 'd probably go for a stored procedure with the mass inserts but i get it . 
  the second level cache is also quite cool and useful in nhibernate . 
  it is just the linq pain that made me never wish to try it again . 
  also the project is pretty much dead these days is n't it ? 
  is anyone even working on asp.net core version ? 
  yeah but the issue with ef7 lacking features is mitigated by the fact that asp.net core itself will be barely usable in its first version . 
  it would take a year or so to make it practical and by that time ef7 will probably be there too . 
  but which science is better ? 
  the one of the unified atheist league , the one from the united atheist alliance or the one from the allied atheist alliance ( https://en.wikipedia.org/wiki/go_god_go ), 
  omg ... 
  i am surprised they work at all . 
  this is my personal website and against the advice of experienced bloggers i do not have separate websites for my hobbies , technical articles , etc. 
  so it contains technical articles ( like 1/2 of the posts ) , reports from music concerts ( in bulgarian ) , reports from events ( both tech conferences and other events ) and occasionally reviews for games . 
  there are even a couple of posts on politics . 
  i have been told that i 've been blocked for `` games '' . 
  most of my technical articles use clean language but i do use words like `` fuck '' and `` shit '' on occasion so maybe this is the reason to be blocked as `` tasteless '', 
  only compared to other orms, 
  and make sure you do n't forget to specify something or miss a foreign key property ( which you may not need in the actual model ) because then ef will just create a bullshit database which you will discover 5 years later when it is full of broken data . 
  the real problem with ef is not lack of control . 
  you can run sql scripts as part of migrations if the database you desire can not be created purely by manipulating the model . 
  the problem is that you can forget to specify something , ef will generate shitty tables and you will not know unless you check what it generates . 
  we all know how painful it is to fix a database once it is full of data . 
  because first of all there is this nice thing called database diagrams that show you a nice picture of your keys and tables where a missing fk is quite obvious and second because in the model you think about the classes that serve your business logic ( so if you do n't need a property you may not put it in ) and when designing a database you think about the health of your data ( which in my opinion is the most important thing in the project more important than the code quality ) . 
  now of course you can look at everything you ef generates and this is what i have done in the projects i chose to generate db via ef but i have found out that this slows me down compared to the method i recommend . 
  i 'd also like to remind that i do n't feel so strongly about this one and i ordered the items from least controversial to most controversial . 
  this one is definitely the most debatable point in the list . 
  for example if i was developing something that i am going to deploy a lot ( say multiple installations for multiple customers ) i would probably go for migrations because of the ease of deployment as opposed to maintaining change scripts or whatever . 
  mocking framework or in-memory doubles . 
  in addition a simple interface over your data context should be enough to continue doing what you are doing now . 
  no need for repository . 
  note that i do n't claim that your project will break if you have repository/uow . 
  i just claim that you increased your complexity and did not add value .
