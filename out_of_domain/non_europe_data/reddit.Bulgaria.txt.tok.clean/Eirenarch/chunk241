  certainly not in the next months . 
  eventually next year but i doubt it . 
  angular 2 seems to be designed very well around old ideas . 
  usually the hot things are quickly put together new ideas like react that are not perfect from engineering perspective . 
  angular 1 is losing to react but angular 2 can not possibly be losing to react because it is not even released yet and its users are only going up ( from example from 5 to 10 users ) . 
  we need to see the angular 2 release push to judge where things are going . 
  angular 2 hit beta recently . 
  you ca n't expect a lot of adoption at this point ( still there is some adoption inside google ) . 
  while it is entirely possible that angular 2 might fail the popularity/usage share comparison is currently unfair . 
  while i agree with you on almost all accounts i do n't share your pessimism for the future . 
  2 years from now it will be usable and the killer feature will be performance . 
  i still ca n't help but think the plan will do more damage than they could have done had they thought of some migration path and taking it slowly but with more quality . 
  for example they might have built just the web api part of mvc6 and focused on higher quality , better ef and other libraries for the first release . 
  it is called mvc core now to avoid that confusion . 
  what do you mean , man , do n't you know php has traits which makes it better than java and c # which do not have traits ? 
  sorry , i just do n't find it funny if it is tagged . 
  you can pick a bunch of failures like this in any platform . 
  the question is if asp.net has more than competing platforms and if these are intrusive enough to be a significant issue . 
  for example this particular one is not a big deal because it happens in literally one file in your application . 
  you know what really sucks ? 
  a database that does not enforce your constraints and does n't tell you . 
  a platform where the unsecure option is the default and you are supposed to know how to make it secure . 
  these are things that set you up for a failure . 
  the code you demonstrate is ugly and this is a problem but the severity is not that high . 
  the all new asp.net will not be a good choice for at least an year , probably two . 
  it is very immature . 
  it is practically not fair to claim that c # is a good language for web development today if you really think the old asp.net sucks and make the claim based on asp.net core . 
  i do n't even know if i want to play just 3 missions . 
  i wonder if i should wait for all 9 . 
  i know it is orthogonal to this topic but i actually enjoy working on deep legacy codebases as long as i am allowed to, 
  1 ) upgrade to the latest version of the tech stack . 
  no . net 2.0 !, 
  2 ) improve the organization and architecture as i see fit . 
  i promise that we will have new releases and the project will continue to function while i refactor it . 
   they are n't super high tech grandiose silicon valley websites, 
  you mean like this one - http://adventurega.me/bootstrap/, 
  why knockout in 2016 ? 
  well i avoid working at places where there is no time for reddit or facebook and if there is time for reddit and facebook i can find time for incremental improvements either by requesting it officially or by cutting the from the reddit and facebook time . 
  why do you want it less intrusive . 
  if you are building a spa you want the framework to handle more things for you that the web platform does n't provide . 
  for example client side routing . 
  i also think that the availability of know-how on the internet is important . 
  also one should consider that using frameworks seen as obsolete makes it harder to hire programmers to work on the project . 
  which happens to be the most popular game engine that supports c # , 
  i have already preordered . 
  i wonder if i should play or wait . 
  i can but it wo n't be easy so i am wondering if it is worth it ... and asking for support from the reddit support group, 
  compared to react , angular 2 and ember . 
  i am not discussing the qualities of knockout ( although when building a spa from scratch do in fact want a full framework ) but the fact that if someone wants to hire me to maintain the app i will consider knockout something that does not advance my career and will want more money to take the job . 
  some people would go further and outright refuse the job . 
  angular 1 is being phased out but angular 2 is about to be released any moment ( it is currently in beta but there is quality documentation , courses , tutorials , if anything angular 2 is much more mature than asp.net core for example ), 
  react is great although not perfect . 
  components  all ( yes , web forms  asp.net mvc just because the former is component based ), 
  the reason i would want a full featured framework is that things like client-side routing are pain in the ass to implement . 
  separation of concerns is a problem too ( how are you doing dependency injection without a framework ? ), 
  i thought it would be one of those threads about how good people are because someone gave a win to someone who was close to promotion . 
  i was about to rant that this is bad and not a real favor and so on . 
  but then i see the op did not accept free wins and fought his way to masters . 
  that 's the spirit !, 
  you did it with terran so you are basically high masters as zerg , 
  i listed my title as `` ide operator '' but i guess it went into `` others '', 
  you mean you never met a developer who could jump on the roof and while yielding a sword and throwing shurikens ? 
  the text does say that there are 59 windows phone mobile developers total in the survey so i guess we can confirm that they exist . 
  also interesting why do the authors think `` we know this survey underrepresents developers in countries where developers are more likely to be female '' . 
  where do they get info that nordic countries have higher percentage of female developers ? 
  we 're already discussing the survey ( top post ) what new does this article bring as opposed to the original survey ? 
  java is takes the second place after javascript . 
  your argument is invalid ( well at least the part about java ), 
  for some reason highly upvoted . 
  he clearly knows the difference himself but if someone who was reading this did not know that tfs and tfsvc are different things ... 
  i do think otherwise and have knowingly and purposefully chosen tfsvc for two greenfield projects in the past year and a half . 
  my reasoning is simple ( and in fact mentioned in the article ) - tfsvc is simpler . 
  i do n't see how the first statement means he does not know the difference . 
  he was thinking tfsvc but he wrote tfs . 
  if you replace tfs with tfsvc in the first quote it makes perfect sense . 
  oh i agree that the article is terrible . 
  i just think he knows the actual difference . 
  he totally failed at writing . 
  have you used svn ? 
  tfs is essentially the same ( + great integration with vs that no svn plugin ever matched ) . 
  in git you commit with two steps - commit + push . 
  in svn/tfs you only commit . 
  this alone makes git twice as complex as centralized source control since commit is the main operation . 
  i do realize that if you go into branching and merging and decentralized development model ( i.e. 
  open source software ) a centralized source control becomes more complex but for a centralized , planned project where the whole team is in the same room or works in highly coordinated fashion these things are rarely needed . 
  i seriously intend to call the spread bullshit `` the wtf ?!? 
  operator '' . 
  what were they thinking when they came up with this dots syntax ? 
  does n't tell you anything about performance in practice . 
  you are ready my young padawan . 
  now join the dark side - http://programming-motherfucker.com/, 
  maybe it is just me but i find it strange that a professional blogger and speaker manages to bore me half-way through his articles and talks . 
  i always tend to endure about 1/2 including on this one and i rarely drop something i have started reading . 
  even read the full article he was responding to . 
  first of all as / u/bweber noted the apm advantage has diminishing returns which may keep the challenge for an ai for a while . 
  however what is more important is that a fair ai challenge would have the ai capped to human-like speed ( say 400 apm ) . 
  allowing infinite apm for an ai would be like allowing more time on the computer clock in chess . 
  the human is not only limited by the speed with which he clicks . 
  the human needs to make intelligent decision where to spend his limited speed . 
  it is only fair that the ai faces the same ( intellectual ) challenge .
