  now oss has won and we have accepted the loss but now we are attacked just because we are not using someone oss tool . 
  come on , we were here first and never asks for your project anyway !, 
  i fail to understand both arguments about sam types . 
  how is that they do n't work for static methods ? 
  you ca n't put a static method into a sam type ? 
  also what is the difference between sam types and delegates when calling ? 
  both require an object, 
  yeah but one day you want to upgrade and one package depends on one version and another package on another and nuget wants to merge them and there are endless binding redirects and ... why do i know these things ? 
  i of course speak for myself and for the thousands of developers that think like me . 
  i did n't invent us . 
  the article itself complains that i we exist . 
  i still do n't get it . 
  you can get a method reference to a static method and pass it to a sam type - http://docs.oracle.com/javase/tutorial/java/javaoo/methodreferences.html, 
  what are the challenges of bringing . net to web assembly ? 
  can we expect to write non-game code for the web in c # ? 
  what is the future of robovm now that you have been purchased by ms, 
  - what about the robovm team . 
  was it a talent acquisition . 
  do you see the team leaving because they do n't want to work for ms ? 
  - what is the future of the robovm technology ? 
  do you plan to merge something into . net xamarin, 
  - what is the future of the robovm product ? 
  on a side note i must admit that i was doubting you back in the day and was making fun of you for trying to bring . net to the open source community and open source to the . net community both communities being somewhat hostile ( especially the open source community saying some things about you that were not nice at all to put it mildly ) . 
  i have to say that you have proven me wrong . 
  thank you for that . 
  there is an open source version of robovm it started as open source, 
  i am dreaming of react-like framework where you write c # and get server side rendering and client side behavior with a single code base ( you can do this today with react on node ) . 
  i hope web assembly or high-quality c # to js transpilers makes that possible . 
  in the actual ama, 
  also it is already over . 
  you can still check the q&a though, 
  another day another socialist writing an article complaining about capitalism . 
  if you do n't like amazon do not work at amazon . 
  it is not like their culture is a secret . 
  ( now the graduation thing was indeed disgusting hypocrisy but this does not apply to amazon ) . 
  i admit that i wo n't be able to handle this kind of environment and therefore i do not apply ( or more accurately i do not allow recruiters to drag me into an interview ) for a job at any company that mentions `` dynamic work environment '' and i ask both contacts who already work for would be employers and the employers themselves at interviews if the environment is demanding . 
  if they block facebook or reddit the interview ends right there and i do not need to hear about anything else . 
  do i get paid less than where i currently work compared to similarly skilled or even less skilled people who work in more demanding conditions ? 
  yes , i do , but i do not see that as a great injustice of capitalism . 
  in fact i think that it is just that people who work overtime , do not open facebook at work and are willing to take the risk of being fired are paid more . 
  this journalism is only important because it gives us opportunity to discuss this type of culture but come on if you are going to work somewhere research the working conditions , ask in the interviews and if all fails leave the company ( as it seems many people at amazon do ) . 
  i do n't see the big deal . 
  you think only amazon are like this ? 
  nobody writes articles about companies in my area and i have still managed to avoid the ones i do not want to work for . 
  i was referring to this :, 
   this `` new '' way of working is actually the oldest game in the world : the exploitation of labor by capital . 
  i do n't see much value in this `` exposing '' considering that the culture there is no secret . 
  come on i live across the ocean and then some more and i still know that amazon 's environment is brutal and if you want to raise a family and play with your kids on weekends you do n't go to work for startups . 
  also if you end up in the wrong company just leave . 
  people live marriages that are supposed to be forever and with companies you never said that you will work there till death divides you . 
  so how do you call it when an employee threatens to leave if his salary is not increases ? 
  extortion ? 
  i wonder if the author made this up . 
  i mean if it was for real surely someone would flip and scream bullshit . 
  i am sure i would n't be able to take it and at the very least will come up with the most sarcastic comments . 
  there is a word for a company that is not at least trying to maximize return and the word is fraud . 
  also companies are only exploiting ( do you really say `` exploiting a mine '' in english because we do n't say that in my native language ) a mine because you own it ( even if you own it for a limited time ) you do n't own people who work for you . 
  it is a voluntary contract . 
  in fact in most countries employees have more rights than the employer ( like they can end the contract without paying anything ) and this is of course unfair rule that should be removed . 
  i wad fired once and i just signed my resignation and did not require benefits because i do n't see why they should pay me if they do n't need me . 
  i had a new job the next week and would have lost the benefits anyway but still i did n't know that when i signed . 
  at least the open source commies do not want to ban proprietary software and do not complain that it exists ... oh wait ... 
  yes but if you do n't make enough money for the shareholders because you want to pay the employee more instead of making them more efficient the amazon way . 
  then you are effectively lying to the shareholders . 
  no , you give respect to your employees because that makes them more effective and reduces the chances that they will leave and the company will not have employees . 
  and of course i think that the fact that employees will leave is much more effective counter measure to whipping than regulations . 
  i am not sarcastic . 
  maybe so but as a shareholder and as a customer i do n't care how terrible the boss is . 
  i only care how effective he is which means he delivers profits or share price increase for the shareholders and high quality and cheap products for the customer . 
  if i read this article am i still allowed to play starcraft ii online ? 
  it is not yet a given that there will be tuple types in c # 7 so i guess it is safe to assume that the answer to your question is `` nobody knows '', 
  i mean that tuples nay not make it . 
  of course they probably will but i doubt they will consider xaml support before the syntax and semantics are set in stone . 
  also i hope that they will not push a low quality feature just because they already built compiler and tooling support . 
  i guess the point is to compare . net to jvm and json libraries are reasonable approximation of real-world load . 
  the removal of code access security may provide some performance gains . 
  i want to see the benchmark where . net wins because i have not seen one yet . 
  i 've crafted artificial ones where i put ints into a list to force java to box stuff but all benchmarks on real tasks i have seen result in a win for the jvm . 
  i am rooting for . net but i have to give credit where it is due - the optimizations in the jvm are a piece of art . 
  it is interesting what happened to his company and if he hit real success but i am too lazy to read all the blogposts . 
  i am surprised this startup did n't fail fast if the lead dev was so full of shit . 
  how about safety and maintainability which seem to be the core of c # as design goals and as why people choose c # . 
  it seems to me that you have to pay for these everywhere if you want to use them somewhere . 
  uhm ... false, 
  first of all many people commenting on the github issue above are unity3d devs and unity does n't even use . net ( it uses mono instead ) . 
  second most ( 70 % maybe ) . net devs are actually asp.net devs and i am sure microsoft does not own the web platform . 
  finally it is irrelevant what options are most popular as we are discussing why people choose c # . 
  they have by definition chosen c # even if we are talking about 3 people . 
  microsoft better sell . net to gearbox . 
  those guys ship . 
  because of vastly superior readability . 
  they may add annotation or something to make get/set methods a property that removes the get part . 
  they can even make a convention that properties are pascalcase since bar in getbar ( ) is just that . 
  it can have some use if you do not expose iqueryable or expression as either return type or argument of the repository methods . 
  it can serve as abstraction of your data access and allow you to replace the data access technology with say a rest service . 
  if you do n't have specific information telling you that you will do that a proper repository is probably overdesign and should not be used as postulated by yagni . 
  a repository that exposes iqueryable and/or expression is of course an anti-pattern in pretty much every case i can think of . 
  i will never grow tired of this . 
  bring in more threads where i can complain about the repository over ef anti-pattern !, 
  no it is not `` by definition '' .
