  i mean unlike js which happens to be the only language working in the browser nobody forces people into php . 
  but honestly i 'd rather quit it and go take care for sheep in a farm or something than work with php . 
  you still have time to go back and switch to typescript . 
  babel moves faster than typescript with the risk of breaking a feature if the standard changes . 
  es7 is not yet fully supported in ts ( only bits and pieces ) so you may have hit a piece of es7 that is not yet supported in ts . 
  second the ts compiler can still spit the js even if you ignore the errors so `` every es6 is valid typescript '' is technically true but why would you ignore the errors ? 
  as you said there are also little tricks like the `` implicitly typed any '' switch that make the compiler skip certain checks . 
  unless you are building a product for web developers specifically i do n't know how you can claim that es6 is usable today . 
  even the most basic functions are not supported in like 1/3 of the browsers out there and i am not even taking into account mobile . 
  async/await for es5/3 targets hopefully coming in a couple of months . 
  async/await for es6 targets already there . 
  sorry i wo n't even check . 
  will still take the sheep . 
  1 year `` lets see how this works out '', 
  hmm it seems like the typing part is still a target and has not failed . 
  i do n't remember ever implementing bfs and dfs and surely never had to do it in an interview . 
  however these algorithms seem quite easy . 
  just recursively go through the nodes and mark them . 
  if asked for non-recursive solution use a stack or a queue . 
  what 's the big deal really ? 
  now if someone asks me to implement a * or dijkstra 's algorithm i will fail miserably since i ca n't even remember how they were supposed to work but bfs and dfs are not only simple , they contain the description in their name and also happen to be the na\u00efve solution if someone asks you to find something in a graph . 
  in an interview environment the candidate may be stressed and not find the thing exciting even if he is normally excited by challenges . 
   we 're introducing two new ways to debug and test your ios apps directly from within visual studio . 
  our ios simulator lets you simulate and interact with your ios apps in visual studio -- even supporting multi-touch interactions on windows machines with capable touch screens . 
  we also unveiled our ios usb remoting , which makes it possible to deploy and debug apps from visual studio to an ipad or iphone plugged into your windows pc . 
  does that mean i can develop for ios without a mac ? 
  that metaphor does not work especially in the presence of asm.js but even before that you can easily drive it to the point where it fails . 
  assembly does not dictate your null/undefined semantics or punish you with a severe performance penalty if you chose to have your own . 
  assembly does not provide an api surface that is riddled with specific high-level semantics that the language you implement must be compatible with if you want to do anything useful . 
  writing typescript is not like writing coffeescript . 
  it is es6 + optional types . 
  basically everyone who knows how to write javascript knows how to write typescript but will not use all its benefits . 
  if you learn something about types ( which takes probably a day to get used to if you know c++ , java or c # ) then you get more benefits . 
  hell , lets say that ts is dead in 5 years . 
  switch the output to es6 take the resulting . js files and go on developing as if you were on es6/babel from the start . 
  there is 0 risk in adopting ts . 
  babel is a transpiler and / u/blaisio claimed that you can use es6 today without a transpiler . 
  also in the presence of typescript choosing babel is wrong , 
  it sounds like you do n't know what typescript is . 
  you can not possibly learn typescript without learning es6 because typescript is es6 + optional static typing . 
  sure great , now you only need to hire haskell programmers somehow , 
  if you do not use bindings you are back in pure es6 land . 
  the current version of typescript implements all of es6 and they are adding features from es7, 
  how about if i have an ios device but not a mac ? 
  that surely is a way to run a company but it does n't scale  also unless you provide very good conditions you have to hire less than ideal programmers . 
  most companies better aim for the moneyball team . 
  i do n't know why the `` abandonment '' feature is so underrated . 
  it is great to have 0-risk solution . 
  if it does n't work just take the output and use it as you would have if it was written by hand . 
  typescript 2.0 will add flow based typing . 
  maybe not as powerful as flow 's but it will cover 80 % of use cases . 
  it will also support . js files ( it supports them today but without the flow based typing there are not many uses ), 
  i do n't see how the fact that you have some types is `` unprofessional '' . 
  also if you write your library in ts you ship it as js . 
  as it happens angular2 does just that . 
  why the hell would you write js instead of typescript if you will provide typescript bindings . 
  that is literally what the typescript compiler does - removes types and leaves pure , human-readable js . 
  no , i did not mean it wo n't scale in a company i meant it wo n't scale for the industry . 
  a couple of companies will hire all the haskell programmers and then what ? 
  you realize that there are probably 20 million programmers worldwide and i 'd say 3/4 of them used js professionally . 
  i know you will be able to hire haskell programmers but this is only because few companies hire haskell programmers . 
  you can of course argue and probably correctly that hiring haskell programmers may be a competitive advantage but if it becomes an industry trend the fact that probably 1/100 programmers can ever be productive in haskell will turn this advantage into a disadvantage . 
  i claim that everyone who can do haskell is smart enough to do javascript but far less ( lets say 1/10 ) of those who can write shipping quality javascript can write production haskell even if you provide double the amount of training ( which is also a problem for legacy reasons ) . 
  i already acknowledged that it is a good way for a small company to get an edge especially if remote working is an option . 
  however if we adopt this strategy where we work in an actual office we will simply have to close the company . 
  that 's like claiming that 0 % test coverage is better than 50 % test coverage because it is not 100 % test coverage . 
  how smart a person is does matter . 
  when learning haskell i have trouble with things that i can recite in my sleep in more conventional languages . 
  i fully understand the benefits i just ca n't force it to compile . 
  my guess is they do n't want to deal with oracle if they do that . 
  also if they acquired robovm as a talent acquisition they wo n't risk the employees leaving to work on the newly open sourced robovm . 
  did n't they do a refund or something ? 
  well with only a year out of college you should not pull this card . 
  there are minimum requirements you know . 
  why people think working at a large company is better than working at a small company just because the company is large and hot in the tech circles is beyond me . 
  now if you really want to work on specific product go ahead but `` work at google '' alone is a stupid goal . 
  a friend of mine ( very clever guy , major boost contributor , etc. ), 
  really believes in classic education . 
  he would approve of interview practices that test if you had classic education except that he has is streamlined far beyond the 5 stages interview bullshit . 
  his questions . 
  what are car and cdr ? 
  ( for senior developers ) what is mapcar ? 
  the point is to know if the person has classic education . 
  he says lisp is like latin in cs . 
  it is not useful itself but you can use it to find out if a person is educated . 
  except that the closure compiler is painful . 
  the code is in the comments ... 
  i believe you mean nsees, 
  the feeling when you ship an api to millions of developers and the next day you want to deprecate it . 
  when i read the title i thought it was about team games like 2 vs 2 and 3 vs 3 . 
  i feel cheated :(, 
  and by `` shitty '' you mean the honest `` pay us x money for renting our product '' ? 
   they will even drop the xamarin name, 
  `` visual studio tools for ios and android '' incoming . 
  microsoft suck at naming worse than they suck at anything else . 
  what ? 
  omg guys you have proper repositories !, 
  but you are not using an orm so you had no choice but to make them proper i guess . 
  i get annoyed because it is boring and everyone feels obliged to do it . 
  yes but nobody claims that we 're wearing pants at work because it is fun .
