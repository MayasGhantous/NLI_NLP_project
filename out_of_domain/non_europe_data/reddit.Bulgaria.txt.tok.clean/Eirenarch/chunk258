  in fact i find mark reinhold 's example of harry potter chapter titles and first sentence from each paragraph quite good . 
  you may not like it . 
  judges like these said apis are copyrightable ( a conclusion that i actually agree with ), 
  the jury trials bring something very important to law - the idea that laws should be simple enough to be understood by everyone . 
  now this may not be the case today but the more complex the laws the more pressure on the judicial system via jury trials and potentially a motivation to simplify the laws . 
  the highest court that looked into the case so far thinks apis are copyrightable . 
  the rest of the world may disagree but the rest of the world does n't use us laws . 
  yes . 
  which happens to be what is relevant to the case . 
  unless the supreme court looks into it this is the end of the legal process on api copyrightability . 
  of course the fair use argument is still undecided . 
  which is the best way known to man . 
  if something can not be explained to mere humans it should not be put into law . 
  i agree . 
  i guess you really enjoy the current legal situation do you ? 
   will you celebrate these days when the jury makes google pay for copying these apis ? 
  yeah i would definitely quit programming over copyrightable apis . 
  my moral prevents me from making money by using copyrighted apis and i ca n't even be in one industry with people who use copyrightable apis so using a language where the right to use the apis is explicitly provided is not an option . 
  this is not true because you would need to write an adapter on the whole package , not just on one class . 
  apis are copyrightable on package level . 
  programmers in general have very strong feelings toward everything that is somehow closed , requires a paid license or similar restrictions so everyone is up in arms against whoever tries to assert some control over programming-related things . 
  this is precisely why in cases like this the jury should not include anyone close to it because in it people are convinced that closed = bad , open = good . 
  srp is totally impractical . 
  it is absurdly hard to define what a reason to change is and to scope it . 
  for example if i am writing a c # compiler i may put it in one class and claim that its responsibility is to compile a c # program . 
  it has just one reason to change - if i want to change the way it compiles c # programs . 
  if this is in ranked other than unranked only i wonder how this will affect ladder placement, 
   we 're definitely not there yet , but we 're in active development and making progress . . 
  the technology is not there yet but they are making progress !, 
  you are all socialists !, 
  i have a very strong argument against tdd that nobody has been able to refute yet . 
  writing tests is relatively boring part of programming and hunting bug is one of the most fun and creative parts of programming . 
  why trade the fun thing for the boring thing ? 
  maybe , if you own the project and make money from it in the long run . 
  hey that was actually good . 
  i do n't believe it will work but i may try it . 
  i think the end result will be just more feature work thrown my way but who knows ... 
  talk about your software mine is always perfect !, 
  random because i paid for the game and i want to use all of it . 
  it would be cool to be hated on a national level rather than on a race level for a change . 
  `` wasted my life in quakelive '' - does not compute . 
  quake and starcraft the coolest games ever, 
  i do n't practice . 
  i play for fun . 
  i am not going to become a pro or anything . 
  is there a tl ; dr ; or i need to read 21 pages ? 
  yes . 
  i write my specification in c # and then i implement it ( i often use the text of the specification for the implementation ) and it always does what the spec says . 
  amen brother !, 
  `` the language does n't matter , you can build things in any language '' is a bullshit i ca n't stand . 
  i do n't know what `` hackers '' means in this context but i find the other uses listed perfectly fine and moral . 
  one thing that makes it better than similar solutions is the ability to get it running without sing in . 
  when they add other languages we can talk . 
  but that bastard joel managed to trick me into writing my first ( and so far only ) line of node.js, 
  but in the c # case the competition is rewriting while they are building on the stable thing . 
  in the typescript case the competition is building on the stable thing and they are rewriting . 
  there will be . 
  next year . 
  i think i prefer it this way . 
  saves me the trouble of trying to remember when a certain version was released which is the second most important information after the order of releases that a version number is supposed to give . 
  btw this one is versioned as 13 , 
  / u/gfody linked the non-bullshit version ( i.e. 
  the feature list ) - https://msdn.microsoft.com/en-us/library/bb510411.aspx, 
  check it and see if any of the new features fit your use cases . 
  there are very specific feature ( like the r integration ) that i doubt many people care about but there are also features that come up quite often like json support ( you can manipulate json in your sps and queries ) and temporal tables ( built-in history ), 
  yeah temporal tables look great . 
  it is much better to take the customer 's dollars and spend the time playing quake or something rather than building silly history tables . 
  when you say `` covering indexes '' does that mean that pgsql will refer to the table even if the full select is included in the index ? 
  i see . 
  what is the downside of including the columns in the index itself ? 
  if you put the columns that you do n't care about sorting at the end would it make a significant difference ? 
  you can charge yourself $ 3000 to allow yourself to provision stuff on azure . 
  the increased revenue may improve your startup valuation . 
  you included the live compilers ? 
  i 'll never let my daughter date someone like richard . 
  tabs ... wtf , man ?!, 
  go use php or node !, 
  . net is not for you . 
  how are you violating the eula if you are running developer edition . 
  what else is developer edition good for if not test or dev environments ? 
  they want to make more frequent releases of management studio, 
  does art run on anything other than android ? 
  even then i highly doubt it is faster than sun java . 
  as if oracle products are chosen/bought by people who care about this kind of political positions . 
  oracle products are chosen by people in suits who will never read this blog . 
  i wonder how the alternative article will do on upvotes/downvotes if posted here - http://arstechnica.com/business/2016/06/the-googleoracle-decision-was-bad-for-copyright-and-bad-for-software/, 
  and i have seen engineers in suits . 
  some of them choose oracle  oracle products have its merits but oracle are not evil since yesterday . 
  they have always been . 
  if someone was ok with their policies 5 years ago the recent developments wo n't change that and neither will a blogpost . 
  yeah . 
  or the known radical pro-open source , fuck ip and oracle stance of the average developer ( especially the one posting on reddit and participating in online discussions and communities ) . 
  the piece is well-written but it will probably be downvoted on ideological basis . 
  normally i would agree but the very reason for this thread to exist is the classification male vs female . 
  it is not a thread about the new build scarlett used where we would have no reason to discuss her gender . 
  the average developer can easily do that . 
  the average developer is not implementing systems that are api compatible with other systems . 
  if i ever work at a company with unlimited vacation they will reverse the policy or i will be fired , 
  oh i wish someone tries this on me . 
  i will be vacationing without a care in the world .
