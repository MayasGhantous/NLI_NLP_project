  i do n't have strong opinion on the issue because i am not too familiar with how people get hired and what they need to do to keep their job outside of what we see . 
  i do n't even have a problem with teams hiring pretty girls as progamers for marketing reasons . 
  however i would really like a meaningful explanation of the female league/tournament phenomena . 
  what is the excuse for these to exist ? 
  i was mainly joking and pretending you said soe is n't hot , 
  my point is that it is easy to claim that soe is only hired because of her looks . 
  while she does not seem to abuse this with her outfit or anything the very fact that she is hot is a counter argument . 
  we 'll never know why the community likes her and managers hire her . 
  that 's pretty limited do n't you think ? 
  well every female in esports does something else . 
  my point is that unless a female is ugly we 're never sure why she 's made it into the scene . 
  as i stated in another comment i think being forced to think about semantics is a problem with a framework for applications . 
  if you are creating web sites with information it is good but if you are building ui it is just something you can get wrong . 
  when i write xaml i find it so liberating to just throw controls around without thinking if they are semantically correct . 
  frankly i have n't done that much client development in either html or xaml so i am not sure about the screen size support but the one in xaml seems decent . 
  i do n't know if it is powerful but it is certainly simpler than html . 
  you have just one layout control ( the grid ) and you set proportions for rows and columns, 
  what about any female 's skills . 
  unless a female is ugly we do n't know if she would have made it to fame purely on skills . 
  that 's pretty sad . 
  this is not how you become a hero . 
  this is how you get people to make fun of you for competing in the kindergarten . 
  if i were a female i would find female tournaments insulting . 
  just like judith polgar did with female chess tournaments . 
  if we 're talking about gamers and not `` personalities '' it is not harder for e female to be taken seriously . 
  just rank well on competitions and no one will question your skill . 
  to play in a tournament , beat other players and even win you do n't need to be taken seriously . 
  if they have the skill they should go and be part of the competition . 
  otherwise they should shut up ( applies strictly to players not casters or other `` personalities '' ), 
  good thing i still do n't know who this lauren elise is and how she has anything to do with esports, 
  so can you cite a female that does better than soe . 
  because i can point out a male that is far worse . 
  in fact the worst e-sports interviewer ever - clutch . 
  yes . 
  still better than js , 
  java is improving at faster pace ( despite being improved very slowly ) than js . 
  i do n't see how this proves vms are harder to improve . 
  exactly . 
  what you actually have is an useless wol copy that has no meaning anymore . 
  the account can play on all servers so whether you have 1 or 10 wol licenses on it is all the same . 
  when you think about it it 's not that strange . 
  the other ecosystem constantly advertises itself as free , not overpriced , open source , etc. 
  one should expect that it will attract the kind of people who would pay less . 
  i do n't think creating menues , textboxes , spans , etc. 
  with divs will end well . 
  if xaml and html resolution independent support in html and xaml is essentially the same there we have a non-html framework with as good support for resolution independent ui as html ( this was the original point , was n't it ? ), 
  edit : notice that xaml also supports proportions . 
  you say that a column is 10 * and another is 20 * and this means that the space will be divided by 3\u00a01/3 for the first column and 2/3 for the second . 
  if you introduce at later point a 3rd column and set it 's width to 20 * the space will be divided by 5\u00a01/5 for the 1st and 2/3 for each of the other 2 columns . 
  notice that this also works if some columns are set to auto and take up as much as they need for their controls . 
  i do n't really know if all this is good practice or how it is done in html but i somehow never learned all this in html and it was so easy for me to pick it up in xaml . 
  as i said i was never a good front end dev in either tech . 
  when i did web development we had a front end dev and i was responsible for generating the html he required from the server framework and also writing client logic and communication logic in javascript . 
  i learned quite a bit but never learned how to do resolution independent stuff . 
  the brainfuck ecosystem grows stronger each day . 
  soon we ( the brainfuck community ) will achieve our goal to make brainfuck the most popular programming language in the world . 
  brainfuck is the future !, 
  do n't worry i downvoted your comment to balance things out , 
  whaaaat , you wo n't delete your twitter account to punish the bastard ? 
  i am surprised this has n't happened already seeing all the fangirls that show up when jd plays in the gsl . 
  wikipedia states `` smallest '' compiler not easiest . 
  you may be surprised ... 
  i was certainly surprised by how many people downloaded my brainfuck interpreter for windows phone . 
  there are many brainfuck fans everywhere . 
  i am not a native english speaker but is n't `` awkward '' a more appropriate word ? 
  in fact i can not think of any reason why someone would claim that there is a better mainstream language unless they are into the `` static typing is the ultimate evil '' camp . 
  a tradition started by tiobe index is that language of the year is the language that gained the most in the year not the language that ended on the top . 
  f # and scala are definitely not mainstream ( at least not in my definition ) . 
  i like python but i think c # still beats it . 
  the best example why is the fact that python devs decided to introduce breaking changes in python 3 but it is having trouble getting adoption . 
  this is something that does not happen to c # due to better design decisions . 
  even if this was not the case what 's the point of duplicating the chart they already have . 
  if they are going to introduce a new title it makes sense to be different from the one they already have , 
  if you pull windows , licenses , etc. 
  into the discussion it is not a language debate anymore , is it ? 
  i noticed that people use `` awkward '' when the thing in question makes people feel uncomfortable , 
  my point is that even if there was a reason still this reason is already covered by the chart . 
  then they judge a platform not a language . 
  even if you judge the tools and libraries strictly related to the language ( refactoring tools , base class library ) i would argue that c # still stays on top maybe even with greater lead . 
  now if you judge the larger ecosystem ( like open source community ) it may lose the first place . 
  sorry i do n't remember that time , 
  you may be right but to me the question `` which language is better '' is not about `` which language we should use '' but a question of `` what do we wish the language we 're forced to use was like '' this is important because the next version of the language we 're forced to use may borrow from one language or another . 
  for example if i am forced to use javascript i 'd rather see it borrow features from c # than let 's say php . 
  if we use your definition of the question , it is already meaningless because we are forced into certain languages by the problems we have to solve and the environments we need to deploy in . 
  these things may affect your choice of language but do not affect the quality of the language ( let alone that the tools and documentation surrounding c # are top quality often because the language is explicitly designed to be tools-friendly ) . 
  if we choose php because it runs on every cheap hosting provider does this mean that the next version of c # should be more like php ? 
  i say no and in fact quite the opposite php should aim to be more like c # . 
  if everyone has completely different criteria then we should stick to the strictly academic debate because otherwise we can not have meaningful debate at all . 
  what is more c # runs on all major platforms today . 
  there are production quality and mature implementations with big and successful projects out there on windows , mac , linux , ios , android and windows phone/windows 8 . 
  if you exclude javascript you can not say this for any other of the popular languages . 
  even java lacks proven ios implementation and c/c + + do n't have positions in the web space . 
  if people write for mono they will get 100 % compatible implementation across windows and linux . 
  very few people do this because most c # users have windows and not linux background and many c # projects target ms environments to begin with . 
  btw the c # part of mono is practically 100 % compatible . 
  it is the . net framework that has holes in the mono implementation . 
  while it is true that not allowing java was apple 's decision this same decision applied equally to c # . 
  still the c # community ( in the form of novell and later xamarin ) managed to bring c # and the relevant part of the . net framework to the ios with production quality and a good number of commercial projects were shipped using this method . 
  also i was not the one to bring platform support into the conversation . 
  if you believe that supporting multiple platforms is a factor in the quality of the programming language then we should count important platform like ios as an advantage for c # over other languages no matter who is to blame about the lack of support for this other languages on the platform .
