  it does n't seem to me like dota has something equivalent to cheesing that is so impactful . 
  there is no hidden information in drafting so it is much easier strategically . 
  also drafting is roughly equivalent to choosing a build order in sc except that in sc you may be forced to change your build due to game situation ( i.e. 
  you messed your micro and now have to change your build to accommodate the lost workers ) . 
  the drafting in dota can not be affected by the tactics later on and players rarely change their planned skill select on every level due to something that happened in the game . 
  this is not what hidden information means ( in game theory/ai terms ) . 
  i 've seen js devs try to do things in c # and they do it wrong . 
  in my opinion you should go deep with your first tech ( say spend 5 + years working with it ) . 
  if you never went deep with any stack then you ca n't learn from the nuances of the other tech you touch . 
  it will be just `` they do it like this here '' . 
  you should stick enough with one tech to see the suffering of its approach to be able to compare it to other approaches . 
   somebody with 3-5 years experience in soa in c # ( plus a dozen other technologies they happen to be working with ) . 
  that part in parenthesis is key . 
  it is never only the language it is always the full stack and stacks often come together with the language . 
  if someone knows c # chances are he knows sql server , wcf , asp.net , entity framework , etc. 
  your non-c # soa guy will need to learn all of that . 
  i 've never seen anyone who picked up a language in a week write good code in that language . 
  or in a month for that matter . 
  i 've seen great programmers write totally bullshit code because they do not have experience in the language . 
  for example one guy who wrote get/set methods in c # rather than properties . 
  he knew what properties were and used them most of the time but sometimes he just forgot and wrote the methods because he was used to c++ . 
  this is supposed to be great is n't it ? 
  i mean to achieve that they need to produce a better platform so you get hooked to it . 
  sometimes you wo n't . 
  the site simply wo n't work . 
  for example i was trying to watch south park under edge the other day - no luck . 
  some controls on the player missing . 
  ajax, 
  visual j + + had delegates so it must have been better  ( based on c # vs java comparison ) . 
  so the problem is not eee the problem is that someone has a more complete offering ( i.e. 
  can bundle stuff ) . 
  if chrome is that much better so be it . 
  i do n't mind the monopoly or a single company establishing the de-facto standard . 
  i have problem with stagnation ( i.e. 
  microsoft disbanding the ie team and refusing to add tabs ), 
  i do n't have any guarantee that they wo n't do it . 
  i am just pretty confident that if they do it the market will wipe them . 
  it was not the lawsuit that destroyed ie it was the competition . 
  code often stops working after a while if it is low-quality or at the very least becomes hard to change and companies care about that . 
  on the other hand the person who makes the hiring decision often cares about quality because he has to maintain the same codebase . 
  the reason we have chrome monopoly is because chrome pulled ahead . 
  if it did n't the competition would yield the same results just slower . 
  no it is not . 
  it is not a problem with the google search engine for example . 
  this is only try with natural monopolies ( someone owning the water supply and there is no alternative source of water ) and government granted monopolies ( patents , highly regulated industries etc. ) . 
  it is not an issue with the google search engine despite its monopoly status . 
  google keeps improving search because sooner or later they will be beaten if they did n't . 
  just like ie was . 
  just like react is n't it , 
  the component hierarchy was great . 
  react , angular 2 , vue.js all go in the same direction because it is great . 
  on first look it seems like the constructors can be replaced with factory methods like button ( ... ) to avoid writing `` new '' everywhere . 
  the static methods can be used with static imports . 
  so what is the common wisdom ? 
  which tools do i enable on my project ( looking at adding some style tool right now ) ? 
  i kind of want the most common thing which has the greatest amount of know-how . 
  apple ? 
  omg omg i am so excited about async/await in es5 !, 
  true . 
  except that for many people ( me included ) the iphone is yet unbeaten . 
  for me the vetting process that ensures somewhat higher quality of apps on the apple store , os updates and the ux are what matters . 
  nobody beats them or even shortens the distance yet so i would n't hold my breath . 
  no they do n't - as i have pointed out multiple times - the google search engine . 
  ok do take replaceable batteries and access to file system but many of us will not ( i can even argue on `` speed '' since iphone wrecks android phones on geekbench and other performance tests ) . 
  the point here is that there are significant number of people for which these things are a feature . 
  it also matters that these people tend to have money and like to spend them and until that changes apple are in a position to not innovate and still be a factor which developers ca n't ignore . 
  btw i use windows phone but as soon as i am forced to change it i am going for an iphone . 
  technical openness does n't matter in my opinion . 
  i mean if it did why is the most closed company out there also the most expensive one ? 
  it is not like they closed their stuff last year , they 've been like this for decades . 
  this is what apple haters like to think  and i am saying this as a person who only owned an ipod 10 years ago and nothing else from apple . 
  most of their products are great even if the latest macbook is absurd . 
  i hear this thing about openness since before the iphone was released and then apple stomped everybody with extremely closed device . 
  android market share is only growing because it is cheap enough for emerging markets . 
  apple are in it for making money so they sell at premium prices . 
  also they should reproduce to increase the voter base , 
  i opened my facebook feed and saw a democrat blame gajo voters , 
  i invented the same strategy independently , 
  hey , do n't fuck the liberal tears !, 
  i drink it !, 
  just be patient . 
  the typings problem will be solved automatically when everyone starts using typescript to write their javascript . 
  what is your definition of `` monopoly '' ? 
  because in my book if google is not a monopoly then ie and windows are not monopolies either . 
  can someone confirm this is using the latest version . 
  we adopted angular 2 for a project when it was in beta 4 months ago but i started working on another project and left other people to work on it so when i come back i will need a refresher and as i understand they changed a lot of things so older resources are not applicable, 
  i do n't see what made you think i am talking about angular 1 when i have explicitly written `` angular 2 '', 
  yeah i suffered through that updating betas and rcs this is why i am asking if this particular tutorial is up to date with the final release . 
  yeah , it is the kind of thing that has more value for the person than to anyone else . 
  the value is that it is won in an tournament , not the copy of the game itself . 
  if i was buying a copy of sc1 i would buy the unopened versions rather than this one . 
  btw my first copy of sc1 with the same box art was also won in a tournament . 
  back then nobody even sold it officially in my country ( bulgaria ) and everyone ( including me ) was playing pirated version . 
  there were probably 100 legal cd keys in the whole country bought abroad and used mainly in internet cafes or shared among competitive players to play over battle.net . 
  in addition bulgaria was hit hard by hyperinflation ( 1997 ) just before sc was released and in 98-2000 a copy of sc cost about the average net monthly income . 
  when i won that copy it had not only personal but very real and practical value . 
  sadly somebody decided that bulgarians should get russian version so the booklet is in russian which i barely understand . 
  still read the whole thing even if it was painful to read . 
  where does the bullshit `` 50 years back '' come from ? 
  i 've seen different people use it .
