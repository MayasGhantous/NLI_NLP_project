  even if he said this it is probably taken out of context . 
  some people like to hate bill gates but he is pretty incredible according to pretty much all accounts . 
  people who worked with him say he was incredible programmer ( probably not linus or carmack level but way way above average ) , he is great businessman ( undeniable even by people who hate him ) , he was ( in fact he still is ) a great manager ( i just love this article - https://www.joelonsoftware.com/2006/06/16/my-first-billg-review/ ) but most importantly he was a visionary comparable to steve jobs . 
  the idea that he would seriously think that computers will never need more than 640kb is kind of absurd to me . 
  this is the guy who envisioned computer on every desk in the late 70s . 
  yeah it is good joke/meme , even i sometimes use it despite often being `` that guy '' who insist on spoiling the fun by explaining that it is fake . 
  you are welcome , 
  technically he did . 
  at the time the 32bit migration was happening he did n't write ( production ) code anymore , 
  unless you want to generate the ef model from the db i do n't see why you would need visual studio and even then there are ways to do it . 
  however judging by your other preferences i think you will like my way of not generating anything but just writing ef model classes to match the database i.e. 
  you make a table product with id , name and price and instead of generating a class you just go and write a class product with id , name and price . 
  you should really explain what you mean when you post this list . 
  i am currently downloading the game and i have only watched the videos on youtube and watched an hour of cooller 's stream but i doubt i would understand all your points even after i play it . 
  your list is basically, 
  x is horrible, 
  y is horrible, 
  please tell us how are these things terrible compared to quake 1/2/3 / 4/live, 
  not having this in the game is absurd . 
  i mean that 's quake . 
  there was a time when how high we jumped was determined by fps . 
  i know we 're living in a new world but do n't dare take our fps counter away from us, 
  this has been a proposal for c # long before it was in typescript . 
  there are a lot of problems with it in c # that made the proposal skip two versions . 
  i kind of dislike the proposal . 
  declaring all current code legacy is not a good idea . 
  my code was fine yesterday today it is legacy and should forever be compiled behind a flag . 
  this is really big tradeoff to make, 
  yes but it is forever legacy behind a flag . 
  and what happens when methods are called from new code ? 
  my old method that ca n't return null causes a warning and forces a null check ? 
  do n't hold your breath . 
  null safety was proposed for c # 6 then pushed to 7 then pushed to past 7 . 
  there are serious backward compatibility issues . 
  the model can be part of the balance . 
  give the champion less health but make it harder to hit, 
  the interface can not have state, 
  i do n't think they need a change on the clr and the dev builds worked on the current clr . 
  save + refresh dev cycle is what i am looking forward to . 
  i am not even sure it works on top of the full framework . 
  you have to keep the balance and move your projects forward . 
  otherwise at some point you literally wo n't be able to hire people because nobody wants to work on your perfectly fine , stable but technically obsolete project . 
  switching to asp.net core on top of the full framework is a nice migration plan . 
  migrate your web tier first , ship it , then move your backend . 
  this is not a backdoor , this was plain old security bug . 
  ms are complaining that the government stores these exploits instead of reporting them so they could be fixed . 
  and despite xp being out of support for three years ms still patched it 2 months ago but of course people have windows update turned off . 
  i very rarely get impressed by art but this is stunning, 
   now with typescript , he 's continuing to change the development landscape for the better . 
  when he does it for the third time you know it is not by accident like many of those accidental language designers that just happened to hit some niche with their crappy language . 
  c # 6 and 7 are not a big deal if you know c # 5.0 . 
  they are mostly small quality of life improvements . 
  just read a blogpost or some similar summary of features . 
  this is kind of standard shortcut for full screen . 
  or at least was back in the days . 
  not from microsoft but they never say such things so they may in fact put it in maintenance mode . 
  even if they do n't in the minds of developers it will be `` the old thing '' and the cool new thing will be core . 
  no but for some things switching between window and full screen makes sense . 
  think of a video player . 
  interestingly i tried a couple of programs now and the only program where this shortcut worked was good old command prompt . 
  i can swear in the 90s almost every program would include this shortcut to go to full screen . 
  i guess times change . 
  does n't work for me on windows 10, 
  to be honest after the anniversary update win 10 is pretty much ok . 
  still not great even after the creators update but considering that step by step some programs are not available on older versions it is worth choosing it . 
  win 10 was outright the worst windows that i have tried upon release ( yes worse than vista ) but they fixed most of the issues . 
  the difference is very obvious with edge . 
  when it was released it could n't download mp3s , now it is a fine browser and even quite stable which is rare these days when browsers compete on speed but crash and glitch like crazy . 
  there is truth to what you say but i just love the modern synching options . 
  i use 3 pcs actively + a smartphone + one more pc that i use rarely and share with other people . 
  settings and history sharing is a life saver . 
  also one of my pcs is a touch enabled convertible . 
  i was n't shopping for touch machine but the only machine that fit my requirements also had touch . 
  i loved it . 
  i wo n't buy ultrabook or even laptop class machine without touch ever . 
  while windows 8 is better than windows 10 in the touch department windows 7 is just not an option . 
  so i kind of standardized on windows 10, 
  sadly i doubt that would happen . 
  the market pressure on ms does not come from linux but from platforms which are even more closed and controlled by the vendors like mac , ios and android ( the latter is technically open but from end user point of view it gives even less control than windows ), 
  joke 's on you , author !, 
  i have been using kotlin since i started as a professional developer in 2006 . 
  only it was called c # back then . 
  annotating is easy . 
  what do we do with all the current c # code that suddenly starts spitting endless amounts of errors ? 
  current solution is hide it behind a compiler flag to turn off warnings but guess what , people are not happy that their perfectly fine code is now legacy . 
  i 'd like them to get as much funding as possible but honestly the first stretch goal with the vehicles seems kind of boring to me . 
  the flying base thing is much more interesting . 
  sounds like the artistic pseudonym of a porn star . 
  they should first build, 
  - fps counter support, 
  - support for turning off all those numbers that are displayed in game . 
  i am seeing 7s everywhere . 
  it is great i just do n't know where i will be able to buy a new device once my current one fails . 
  i wo n't build one myself and seems like ms does n't want to sell one . 
  best ux ever , only needed notification center . 
  the big features like fps counter first , 
  with ts it is easier . 
  first of all you accept ts as the lesser evil anyway . 
  ts is younger so not so much legacy . 
  it also throws errors on existing js so people who migrate are used to dealing with these .
