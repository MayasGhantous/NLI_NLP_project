  i do n't really care about resolution or even effects but that 30fps thing drives me mad . 
  i actually did n't upgrade from crt to tft monitor on my gaming machine until the 120hz 3d monitors came along . 
  they can do whatever they want with resolution and graphics but they should never mess with my fps . 
  dance central , kinect adventures . 
  spent more times on these than on every other console game i have played combined . 
  yeah , you need to press the f12 button on your controller ... 
  like the competitors who made a device that does not allow playing audio media ? 
  i am getting the impression that this guy is wrong more often than he manages to get things right on the first attempt . 
  of course it is not unreasonable to think that the software has any problem with it . 
  it is unreasonable to think that ms would allow something like this on their most tightly controlled platform . 
  i thought about this but since i did not recall seeing it here ( probably downvoted fast ? ), 
  and reddit did not report the link as already posted i decided to post it . 
  i admit my guilt, 
  how long does it take to get to the state of not going back ? 
  i ask because i only used fit once in a team environment for 5 months and ended up quitting before i started to like it . 
  i did not make any conscious effort to learn it beyond the presentation that the person who pushed git in the organization gave but i also never made an effort to learn any of the other 3 source control tools i have used and did n't end up so frustrated, 
  i really appreciate this . 
  it is the shortest and up to the point tutorial for git i have seen . 
  on the other hand i simply feel like i do n't like it . 
  i do n't like making branches and i tend to avoid them on purpose and i also like to have a ui . 
  however if i absolutely need to use git i will try this method . 
  then my conclusion is that i am not compatible with git :(, 
  i really thought reddit would not let me submit something with literally the same url . 
  i am sincerely sorry . 
   i 'm not saying you should ditch everything and learn git . 
  just do n't think you need to use all the crazy features available to have version control . 
  the problem is that while using git i felt like i had too . 
  all the tools , all the know-how on the internet was constantly shoving these features in my face . 
  one of my main problems is that i find source control , automatic build systems and all this process stuff remarkably boring . 
  you know how to work as a developer you have to know different pieces like databases , programming languages , algorithms , frameworks , design patterns , source control or even math . 
  some people have passion for one thing ( for example mine is programming languages ) and find another boring . 
  other people are just the other way around . 
  i just find it really strange that everyone suddenly went crazy about the most boring ( for me ) part of software development and in addition i find it frustrating that this particular part forces me to invest in it ( unlike the previous tools it is supposed to replace like svn ), 
  i never moved past using git as svn ( i used something called cherry pick in the ui though ) . 
  i never stopped wondering why it had double the steps of svn and why eventual problems were so much harder to fix than svn . 
  obviously it is difficult since i never made any effort with the other source control tools i use and did not have significant problems with that . 
  i use github for windows on a personal project just to get a feel for it but this is obviously not enough since i work alone and rarely on it . 
  i do n't know ... it pays the bills , it seems fun most of the time . 
  i even enjoy reading about and actually programming in my free time but certainly not about source control tools , agile methodologies or unit testing . 
  this is why i try to learn things i find interesting and use what requires the least effort from the other areas . 
  i would do it gladly but what for ? 
  nobody uses mercurial and everything is hosted on github not on mercurialhub . 
  the majority of projects i work on are neither mine nor open source . 
  i have to use some open source libraries and get them from github and i also had to work with people who pushed git in the organization . 
  i never heard anyone mention mercurial although right from the start i liked everything i read about mercurial more than what i read about git and the name is way cooler , 
  1 ) all other platforms have feature complete professional grade ide tools available for free . 
  why do n't you have a free version of visual studio that supports plugins and full featured professional development lets say on the level of vs pro . 
  i truly believe the vs is the best development environment out there but it is not that much better and it seems like all competing platforms see having a free ide as an important advantage . 
  why is microsoft an exception ? 
  i know express edition is free but it is not professional grade ide . 
  2 ) are there any plans to bring portable class libraries to express versions of vs. 
  it is really frustrating when ms claims tools for win8 development and windows phone development are completely free . 
  then claims you can easily share code between the platforms but it turns out pcls do not work with express . 
  one cool feature of vs online is that you can have non-open source projects with up to 5 people for free . 
  as far as i know the free offering of github only applies for open source projects . 
  well ... it is, 
  i do n't think the monaco part can be used with wp projects right now . 
  currently it is limited to azure solutions . 
  obviously in the future they would aim to enable it for all kinds of projects but no reason to get overexcited yet . 
  the team foundation service ( cloud hosted tfs/source control/automatic builds ) is really cool though but it has been in use since last year and is also free . 
  why ? 
  how do you reify generics on vms with no reified generics ? 
  so basically the same as far as source control goes . 
  on the other hand tf service has work item tracking , project management templates , etc. 
  i personally do n't care about these but i imagine someone does . 
  last time i checked cloud 9 was barely better than notepad editor ( although slower ) . 
  i bet microsoft 's infrastructure is more secure than your average company . 
  i do n't get what you mean by `` completely out of your control '' . 
  it is not like microsoft is gon na make it public . 
  they may stop the service but you will still have your local copy . 
  you may dislike the final result of web forms but in my opinion web forms is the most complex and huge web framework out there for any technology probably only rivaled by gwt . 
  it is also very high quality for the goals they put ( i.e. 
  make web development look like desktop development ) . 
  asp.net mvc is like a student 's project compared to the complexity of web forms and this is disregarding the fact that when web forms was built it was built alongside core asp.net which mvc just uses as it is ( sessions , authentication , cache , httpcontext , etc. ), 
  in the context of this argument which if i understand correctly is `` who is going to fund large , high-quality codebases '' web forms is perfect counterexample . 
  it is huge , it is high-quality and it was funded by a corporation . 
  for the record so was mvc . 
  they started accepting contributions just recently and most of the new stuff is still written by people paid by ms. 
  so is having an e-mail not hosted in your house , 
  we should really define `` dead '' when talking about webforms . 
  it is not cool . 
  in the open source world this does mean dead in most cases but microsoft are steadily releasing new versions with new features . 
  as for what developers wanted ... developers of 2002 wanted very different things than the developers of 2010 . 
  what is more customers in 2002 wanted very different web applications than the customers of 2010 . 
  this is why webforms is not everyone 's favorite right now . 
  open source mvc frameworks did exist back then but nobody understood why they needed them both because of experience with the web platform and because of demands of the projects . 
  on a side note i am actually about to start a brand new project with web forms because it feels much more suitable for this type of project . 
  the project is old school web site ( think of wikipedia ) with forms that you input text data ( no rich editing just plain old text area ) , multiple dropdown menus , no fancy animations or effects , and large grids with paging . 
  i do n't care to control the html output for this project and updatepanels are fine way to page grids of data with ajax and i get all these out of the box while i would have to do it semi-manually with mvc . 
  this !, 
  on the other hand it is a nice option to have and i would use it but i would be sad the moment they invest more in the web apps than in the desktop . 
  so you basically if-check the types wherever there is casting ? 
  i would love to read an article about these findings . 
  i am sure it will be quite popular in the interested circles and will cause a lot of debate . 
  websites changed into ( single-page ) web applications . 
  this is what made web forms out of date . 
  i believe component frameworks will come back at some point when the web landscape becomes more stable and what we build for the web stops evolving so fast . 
  when things settle down like in the desktop world component frameworks will rule the web world as well . 
  i ca n't be bothered to stitch html with javascript when doing ajax and compose little pieces of html for every single and super standard control . 
  on this level i do n't think i ever worked on code that was not public ( i.e.
