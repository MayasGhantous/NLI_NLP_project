  one of the biggest `` problems '' with signalr is that you can not do that . 
  you must maintain your own list of clients if you need it . 
  this is a conscious decision and the signalr team made it after seeing socket.io problems with scaling to multiple servers ( i.e. 
  the list of connected clients must be distributed in some way and eventually guaranteed to be consistent before each message ) . 
  btw i may be wrong and it may have been another library that had this problems and not socket.io, 
  one interesting point is that with c # users can make use of the dynamic pseudo type to call methods on the client without any code generation which may ( or may not ) make signalr feel as naturally integrated with the client javascript code in a way that is similar to socket.io, 
  the biggest problem with wcf is that it is very hard to configure . 
  there are some use cases especially very heavy enterprise soa solutions where wcf is probably the best option . 
  and also has out of the box examples for scaling using redis as backend , 
  i would probably choose to live in a messy democracy but on the other hand i would probably choose to use the products of the dictatorship . 
  for example i use chinese electronics , 
  around here we call it informatics , 
  the c # linq keywords are contextual ( i.e. 
  they are not keywords outside linq expression ) and in addition they are quite straightforward to people who know some sql which is practically everybody . 
  it is obvious that scala is more expressive language and it is well-known why and why it would be hard to do in c # or java . 
  however this expressiveness certainly comes at the price of complexity at least in the case of scala . 
  there is a difference between `` hate it '' and `` prefer to use gui '' . 
  i prefer to use a gui but i am happy there is powershell instead of just cmd or even bash for the times there is no gui . 
  does n't change the fact that blizzard failed and disappointed people . 
  if they want to make higher leagues more meaningful they should have introduced new leagues from the top not effectively demoting everybody . 
  funny thing they made everything to make the ladder feel like an improvement and then throw this shit into the fan . 
  if someone does not follow news and discussions he is almost sure to quit . 
  with my suggestion no one gets demoted for no reason and therefore no one gets frustrated . 
  it is actually well-know fact that people will not take reduced payment and will prefer to be unemployed instead . 
  this is why governments introduce inflation to reduce the pay without decreasing the number . 
  same should have been done with the ladder . 
  provided the most interesting games , comebacks , strategies and unorthodox play . 
  not as good as 2012 favorite suhosin but still quite good . 
  you get constructor type inference for generics . 
  seems like better generic support . 
  maybe not what you are looking for but definitely an improvement to generics . 
  can someone explain what method and property expressions are supposed to do ? 
  that 's what i thought but honestly i do n't see significant improvement over, 
  public double distance { get { return sqrt ( x * x + y * y ) ; } }, 
  so i thought it may be something different . 
  everything is syntactic sugar but this sugar does n't seem sweet enough so i wonder if i am missing something . 
  i am with you on this one . 
  i was just pointing out that there is at least something ... 
  my personal top wish is some support for object initializers for immutable objects . 
  i simply do n't think it saves enough tokens . 
  4 braces , a get and a return ? 
  is it really worth it for a type member . 
  and i will have to teach it in my c # course , 
  i 'd bet they be properties with public getter but no public setter since so many things in . net depend on properties and not fields . 
  normally there are not many properties of this kind and for methods i am not sure it is a good idea to begin with . 
  the syntax for methods is so entrenched in devs minds that the noise is practically invisible and if it is not there it may seem strange and actually slow-down reading . 
  but delegates are in fact used as parts of larger expressions . 
  method definitions are not . 
  so what are the performance implications of adding int to uint as opposed to int + int, 
  pattern matching and tuples please . 
  the switch statement is full of shit anyway at least upgrade it to do pattern matching . 
  you realize that mono being like 2 years behind regular . net still beats all immediate competition from the open source world ? 
  i assume otherwise but ok , 
  visual controls be it asp.net , winforms or wpf bind to properties and never to fields . 
  is anyone worried by the lack of official post on this ? 
  i almost feel like the original post made things up ... 
  where did you see that it is coming back ? 
  some people are just more talented . 
  i have a friend that is good at almost every game he touches . 
  while there are many other factors like background , how effective you are at training ( not just playing ) and the community you are in fact is some people just pick it up more easily . 
  of course with hard practice and many more games not so talented people can catch up but imagine what happens when a talented player plays a lot of games ... things like flash and jaedong happen . 
  now to be honest high iq ( i.e. 
  ability to analyze ) can help you improve faster at mechanics . 
  that being said talent is not excuse for bad performance . 
  everyone can at least improve if they make a conscious effort . 
  hell , there 's that guy that plays without hands ... 
  you need to analyze how to build pylons and probes . 
  this is not as simple as clicking around . 
  for example i try to keep a mental queue and go through cycles of building , looking at army , building , looking at army ... 
  this is quite easy to see as zerg but the mental queue exists for every race . 
  there are other things as well like how you group your units and how you use shortcuts . 
  btw masters is not only about good mechanics anymore . 
  it used to be like this in wol when more people played the game and masters had higher percentage but nowadays you have to read your opponents and even get into mindgames to get into masters . 
  i wanted 2 vs 2 for so long in a real tournament . 
  btw are the vods paid ? 
  i disagree that no mind games are required for masters . 
  i have seen quite a bit of fakes , cancels , etc. 
  also i did not say that you need very high iq to be in masters but it is reasonable to expect that a player with a higher iq will come to the conclusion about the mental queue ( and other things ) faster than someone with lower iq and thus get into masters faster with everything else equal . 
  not that the other player will not come to the same conclusion eventually . 
  btw i agree that we do n't see enough intelligent play and i blame the maps for this . 
  they are all the same and practically force macro games which promotes mechanics over creativity . 
  that 's true . 
  on lower levels mechanics  intelligence . 
  it is with equal mechanics where strategy comes into play . 
  high level play usually includes strategy because the mechanics are pretty much equal to the point of diminishing returns . 
  i think the most important `` talent '' thing is `` hand to eye coordination '' which can be developed but how fast and to what limits you can develop it is pretty much genetic thing . 
  on the other hand the people that i know who are good at all games for small amount of time invested are often good at different kinds of games . 
  for example the most talented guy i know was good at homm3 which can not be explained by hand to eye coordination . 
  he is quite intelligent too . 
  i will consider paying just to support the 2 vs 2 thing . 
  i may not even watch the 1 vs 1 ( tournament fatigue ), 
  he is not serious , just trolling , 
  i challenge this assumption . 
  given enough saturday nights and beers one should be able to learn building compilers this way . 
  how are the exercises done ? 
  do i need c++ or i can write java ? 
  i call bullshit on the claim that jit compilers result in better performance . 
  in theory they can in practice they do n't because they balance between optimizations and jit time . 
  no , it is not . 
  java and . net are certainly not popular because they outperform c++ code .
