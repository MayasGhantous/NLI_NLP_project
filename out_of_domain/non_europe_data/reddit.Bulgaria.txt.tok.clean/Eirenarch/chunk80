  no it is not especially since java and . net do not actually outperform c++ . 
  java was popular even before it had jit, 
  since i do n't intend to read the full discussion where exactly is the evidence specifically for jvm and clr ? 
  uhm ... it certainly does mean that he is not `` talented '' in mechanics, 
  in general i agree with you but if they are developing a new language feature they will probably want to make it work with both internal and external stuff . 
  btw i do n't think you can achieve better performance by not using properties . 
  everything is inlined anyway . 
  but jaedong has once he was free from kespa , 
  i am still undecided on the topic if this is a parody ... 
  but he definitely managed to reach his traditional second place , 
  obviously he decided to retire his old galaxy s2 phone, 
  do n't forget to link it here . 
  obviously oppressed by male programmers . 
  i hope you are joking . 
  4chan is about offending people , is n't it ? 
  everyone who is easily offended by strangers on the internet should be . 
  i went to the city council and got a license to offend women . 
  then i thought i 'd better get a license to offend whoever i want so i got that one too . 
  interesting . 
  i wonder what the reason is . 
   in the core library , certain convenient collections seem to be missing , such as sorted set and dictionary ( map ) , linked list , queues , etc. 
  wait !, 
  what ? 
  how do people even program without a dictionary ? 
  is there some de facto standard collections library that is included in every project ? 
  the author is overreacting then . 
  it is not like sorted dictionary is that essential . 
  `` overreacting '' does n't mean `` rude '' , 
  so basically insulting php on internet boards whenever possible helps just a little bit . 
  maybe some student will see the insults and look elsewhere . 
  come on man !, 
  rails is so 2011 . 
  it is all about node.js today . 
  let alone that he chose a hash function that is o ( n ) instead of declaring first character of the string to be the hash . 
  this is o ( 1 ) and it will probably be easier to invent function names , 
  still my idea of using first char of a string as hash beats your explanation . 
  however do you seriously think rasmus thought about the benefits of his approach back then or just wrote the first bullshit that came to his mind ? 
  we are not sure about the effect on new programmers . 
  there is a chance it helps and it is surely fun . 
  obviously `` lol php sux '' is useless but more elaborate attacks may help . 
  because the jvm is far better than the clr at least in terms of performance . 
  the jvm is the most impressive vm out there , period !, 
  it is the best humankind is currently capable of building . 
  clr probably takes second place but it is still far behind . 
  note that this does not apply to dalvik even though it runs java code . 
  i am quite curious why mono produces so many errors . 
  maybe some request queue overflows due to bad performance ? 
  strange how things have turned . 
  these days websites tell me to upgrade to ie9 when i am using ie11 because they compare browser versions lexicographically or worse they just look for version 9 in the user agent . 
  other websites block me from using them with ie although if i fake the user agent they seem to work perfectly on ie9 +, 
  i really do n't see why you would think so . 
  optional typing allows you to go fully type if you want to . 
  if you are worried that devs on the project will take shortcut just integrate it in style check rules on your build system and you have a statically typed language . 
  the httplistener performance should be comparable to owin performance . 
  in fact it should be better . 
  running on windows may play a big role here and it is sad that top performing tests are not available for windows but the scala play test fairs pretty well compared to . net . 
   the problem is that . net based best result is about a fifth of the top performer . 
  that is bad . 
  both statements are false . 
  top . net result is usually around half of the performance of the top performer . 
  the test where it performs 1/5th is actually database query and i will blame that on non-optimized mysql driver rather than . net, 
  second while 1/5th performance probably means that things are not optimized enough this is not anything significant for most real world usage . 
  if the framework allows you to write code more easily you could achieve much more meaningful optimizations in your own code . 
  also all frameworks above . net in the json ( i.e. 
  non-database ) test are actually jvm , go and c++ . 
  i 'd argue that these are formidable competitors for the performance crown and there is no shame in losing to them . 
  several of the . net tests do not run in iis so the web servers are out of the equation . 
  now we may argue that windows presents some part of the problem but then again you do n't have the option to run . net on linux anyway so for practical purposes jvm still has better performance in this type of throughput tests . 
  btw my impression of the jvm vs clr debate is based not only on this benchmark but also on reading about the optimizations in both vms . 
  while the clr is impressive the jvm optimizations i know about simply trump the corresponding clr optimizations . 
  for example as far as i know the clr does not perform more aggressive optimizations once a certain threshold of calls to a method is exceeded . 
  on the other hand i am not an expert so i would really like to hear that i am wrong on this one since i am actually a . net dev, 
   serialization : aspnet-stripped 59,891 compared, 
  http-listener 107,513 - 50 % of the top performer, 
  it performs better on the plain text as well although you are correct that it is 1/5th of the top performer . 
  it is worth noting that top performers on other test like the java servlet and go also fall significantly behind on this test . 
  many of the tests do not include full-blown web server for example http-listener . 
  well go beats the jvm and c++ in some of the tests and is pretty near on others so ... 
  yeah i know that . 
  for example in the current state generics in clr have the potential to provide significant speed boost of the clr and there is nothing stopping the clr from implementing other jvm optimizations . 
  i am not sure the reasons are what you describe . 
  it seems to me that the jvm has many more interested parties than the . net so the amount of money and therefore the amount of engineering effort in jvm is just much higher than in the clr . 
  on the other hand it seems to me that optimizing a vm is an investment with diminishing returns so given enough time clr should be able to catch up . 
  this is a throughput test , not latency test . 
  not that jvm would suffer latency except in the cases where gc kicks in . 
  and t-sql suddenly shoots up ... 
  uhm ... what ? 
  i play a lot of team games , have a lot of fun and my friends dropped 1 vs 1 long time ago and now only play team games with friends . 
  also all of them enjoy rushes . 
  they were the kind of guys who 5 pooled each game in starcraft i. 
  the notion that `` nobody plays team games '' is simply false . 
  now if people enjoy rushes is another topic . 
  i personally enjoy rushes/cheese/all in far more than any other kind of game both when watching , when doing it and when someone does it against me . 
  btw i firmly believe that people quit sc2 not because of the team games rushes but because of the total disrespect they get for liking 2 vs 2 and not liking 1 vs 1 . 
  also no 2 vs 2 pro scene . 
  i knew that the voice of reason would be downvoted to hell in this thread . 
  btw i also like the statement that `` nobody plays team games '' . 
  yeah , right !, 
  if blizzard does what he suggests i promise to stop playing team games and drag 2 more people out of starcraft with me . 
  rush/cheese is far more fun that `` nice macro games '' and fuck what artosis says !,
