  you should worry since computer scientists are quite egotistical and will end up simulating themselves quite soon . 
  once you 've got true hard ai you 'll remove the need for software at all , though . 
  more like interesting existential issue wrapped in a shiny package, 
  the problem is not to produce compileable strings of code , it 's to actually have a machine that can understand the task and implement it . 
  what 's the point ? 
  but what are the benefits of using biometrics for determining identity ? 
  the only redeeming feature is their uniqueness , but also they 're i 'm mutable and actually identify a * person * - something i 'm not sure i 'm comfortable with . 
  i am asking why should we prefer identification methods that can be used to connect a virtual identity to an actual person , thus removing the possibility of anonymity from the system . 
  may i remind you that most western countries have a copy of your fingerprint , and since it 's impractical to change it , using it as an identification method in some system would mean that the authorities can connect your virtual identity to your actual person , which is not that comforting . 
  usernames are much better because no such connection can be made involuntarily and they can be easily changed . 
  also i have n't heard that forgetting usernames was a huge problem for people , their entropy need not be that high . 
  i am asking why should we prefer identification methods that can be used to connect a virtual identity to an actual person , thus removing the possibility of anonymity from the system . 
  may i remind you that most western countries have a copy of your fingerprint , and since it 's impractical to change it , using it as an identification method in some system would mean that the authorities can connect your virtual identity to your actual person , which is not that comforting . 
  usernames are much better because no such connection can be made involuntarily and they can be easily changed . 
  also i have n't heard that forgetting usernames was a huge problem for people , their entropy need not be that high . 
  it 's a step towards more expressive types which have stricter guarantees . 
  look up dependent types . 
  you could easily say that 10 years ago though . 
  hardware support is still miles away from windows . 
  in windows , hardware just works - in linux , you have to be mindful of what you buy and might need to actually do something yourself to make it work ( messing with shell scripts , installing drivers through unconventional or even conventional methods , etc ) . 
  he 's probably not a native speaker , tighten your pedantic sphincter . 
  what are you using to build your `` vm hotel '' and where 's the advantage to that on a dev machine ? 
  no , i mean tighten . 
  there 's enough bullshit coming out of it already . 
  yeah , that 's why i just told them too look them up , they seem to be a generalization of this of sorts . 
  at least i learned through them about these tricks at all . 
  rust 's solution is better in every imaginable way though . 
  statically guarantees stuff about * all * resources , not just memory , so you can easily combine that with raii and never have to worry about closing handles and such . 
  not to mention that gc still suffers from being able to set pointers to null and such , so you 've only solved a very small subset of problems . 
  rust guarantees nulls away . 
  lol why would they * ever * be ? 
  no but seriously i 'm just joking, 
  yep , the rationale for that decision . 
  sounds like one of those things that are just too cool not to play with at home :d, 
  i have a beast dev pc , how do i leverage vm tech in the last painful and most quick way ? 
  my goal would be to be able to * effortlessly * manage those things so i can just pop in and out when trying out experimental software and so on . 
  can you recommend me where to start ? 
  are you supposed to use them with a graphical environment , or ssh , or x forwarding ? 
  ubuntu/fedora user . 
  thanks man . 
  once i 'll have some time i 'll look into it . 
  it 's a nice promotional video , but [ stallman 's tedx speech ] ( http://www.fsf.org/blogs/rms/20140407-geneva-tedx-talk-free-software-free-society ) explains the fundamentals and details of the ideology and its ways much better i think . 
  but it 's probably only worth watching for those actively interested : an animation such as this can capture attention , but you should show them that tedx vid so they actually know what 's going on . 
  shit , really ? 
  damn , what a self-fulfilling prophecy . 
  not happening , at least not in 2015 . 
  it ca n't even compile a proper kernel , although work 's being done on that . 
  it 's far from compiling production-ready linux distros . 
  gcc still produces faster binaries too . 
  and recent improvements to it really leave no reason to switch to llvm . 
   but dammit its true, 
  something something fat guardian , eccentric protector . 
  llvm is what actually drove gcc to rapidly improve its diagnostics , probably even compilation speed - more power to them . 
  personally i just hope to see work on making gcc a better target because it is simply a more mature backend and does support more architectures . 
  both have advantages, 
  this , i 'm not crazy , the question is asking for it . 
   interesting i had never heard stallman speak . 
  he has a good speaking voice and he does n't give off any recluse vibe that is propogated through the internet . 
  i saw him speak live when he came to our country , it was great . 
  he sounds very ... 
  * american . 
  * especially in the way he articulates certain words like ` cash ' . 
  that 's just an interesting characteristic to me . 
   one is the monetization of free software . 
  there 's a lot of accent on this because he tries to make it clear what free software is not about - the existence or inexistence of ** price ** . 
  i do n't think that you can support a classical monetization system directly selling software - but who cares about that anyway ? 
  you can certainly build a * business * around it - github , redhat , etc. 
  giving back to the community and making a profit are not mutually exclusive !, 
   the reality is that most people are not programmers , have no interest in source code . 
  they 're not interested in * programing * - but the idea is to get them interested in * their own freedom * . 
  for me , it 's definitely not just that - i like the foss community better , i prefer that software , and i prefer those people , but that 's just me . 
  there are also objective benefits besides freedom , mostly illustrated by the huge open source movement , which stallman should , i believe , embrace as an improvement and success . 
  disagreeing with people who directly break your principles : obviously justified . 
  disagreeing with people who apply your principles and prove them to be a great benefit to society : a bit too far for me . 
  but there 's been a lot of infighting so i can at least understand , although it 's still a very unfortunate turn of history . 
   also it was off-putting to hear him call most computer/software users ` suckers ' . 
  i agree i failed to see the point of that . 
   i am a college professor and share with my students foss on my webpage and in class . 
  i figure that 's my small way of contributing . 
  wow interesting !, 
  what do you teach ? 
  i can tell you that promoting free software as a professor is a * huge * deal . 
  one of my professors also uses linux in class and mentions it , it 's quite a meaningful encouragement to both existing and potential users . 
  thank you i will edit my comment . 
  my hope is that rust catches on , someone implements a much cooler , easier to develop , and faster-moving kernel with it - another culture is born . 
  edit : warning , silly daydreaming i accidentally posted on reddit, 
   but even then there is no escaping that as it professionals they mostly sucked because of their lack of ballast . 
  what does this mean ? 
  thanks for making me notice , see edit, 
  * what follows is mostly an exercise in hyperbole and if you have emotional attachments to ubuntu you should probably not take it seriously : *, 
  ubuntu being so popular and well-supported is a *** catastrophic tragedy . 
  *** sure , in and of itself , those two facts are good for ubuntu - but my god is that a whole shitload of ruined potential . 
  ubuntu software flat out *** sucks . 
  *** they use ancient technology such as compiz , unity is so unimaginably awfully designed ( aesthetics of windows are good though ) , and their software is the of instability . 
  a week does n't pass with something not crashing . 
  and their software is fucking *** old *** ( gnome , general tools ) . 
  * installing support for java ui corrupted my scala dev tools for fuck 's sake !, 
  overall it gives the impression of being a rotting carcass with makeup . 
  if only fedora was the top distro and more development was focused on it . 
  gnome is so much nicer .
