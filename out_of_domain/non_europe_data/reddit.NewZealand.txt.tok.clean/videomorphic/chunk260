  so why would you tax people for capturing what would otherwise be lost ? 
  it drains away to the sea * along rivers that would otherwise run dry that people want to use as fucking rivers and not irrigation sources * . 
  that 's not paying for water . 
   the stuff that costs a fortune to collect , extract , permit , pump , distribute and irrigate . 
  that 's not paying for the water . 
  the water is free . 
   minimum flow requirements apply to all water takes . 
  and they should be 100 % of whatever the flow would be without scummy cunts like you ruining our country . 
  nobody wants hemp , it 's a useless garbage material . 
  it 's not solvable by a free market . 
  doing that will have the same effects that pricing things like that always does : not allocating them fairly , but just allocating everything to the rich . 
  we should allocate exactly zero water to farmers . 
  if they ca n't irrigate their farms using the rain , they can fuck off . 
  no , all of gst should go . 
  gst is fucking retarded . 
  oh yeah , great idea . 
  we could get a new format that goes from rtr and onwards . 
  that 's just what we need , a shit-era-of-magic-when-they-stopped-printing-good-cards format . 
  yay . 
  yes, 
  why would someone switch from coffeescript , which is basically a thin veneer on top of javascript to make it prettier , to a verbose , statically typed compile-to-js language ? 
  they 're polar opposites . 
  rust seems to have found a way to be * even more design-by-committee than c++ * . 
  and that 's saying something , because c++ is literally designed by an iso standards committee , which are pretty much the committee-est committees to ever committee . 
  what inevitably seems to result from all these discussion , from an outsider 's perspective , is that they get the absolutely bare minimum feature that all the hugely varying people on github can agree on , which is disappointing . 
  really they should just get rid of these long drawn out discussions and pre-discussions and working groups and shit . 
  it 's a new , young language . 
  it has a self-hosting compiler . 
  if the language is actually good and designed well for big codebases ( which it must be , given how much people rave about it ) , then people that suggest new languages should just be told to implement them and see how they pan out . 
  instead of spending months upon months upon months discussing non-lexical lifetimes and const generics and generic associated types , * just do it * . 
  just implement them . 
  like really , values in generic types is not something that needs months of discussion . 
  it 's a simple feature , easily described , with simple semantics . 
  rather than months of bikeshedding , just implement it and see where you get . 
  if it does n't work , then change the implementation . 
  ** communicate with code . 
  hell , ** even c++ is better in this area ** , and as i said , it 's designed by a fucking iso standards committee , probably the least agile possible way to design anything on the planet . 
  c++ features getting into the standard is basically assured if they 've been implemented in multiple different standard libraries or compilers , and basically impossible if they have n't . 
  instead of spending months and years hypothesising over things like coroutines , they 've actually just gone and implemented them in msvc + + , and that 's been a much bigger factor in whether they 'll go into the standard than all the prior discussion about them theoretically . 
  if the rust team just went and actually implemented these things , and put them in unstable - which is presumably the whole point of unstable - and evaluated them there , they could move much more quickly and we could actually use the language . 
  as it is , i expect to see modules and concepts in c++ before i see rust stabilise features that c++ has had for two decades ( like ` template < int n  class vector ; ` ) . 
  maybe not in the standard , but they 're * already implemented in actual implementations people actually use * , which is the relevant comparison . 
  certainly not from dairy farms . 
  they 're clearly not strictly enforced , given that there are lots of examples of streams and rivers run dry . 
  household income * was * personal income then . 
  you did n't need two incomes to afford a house . 
  you could buy a house on a single income , while mum stayed home and looked after the kids . 
  now you ca n't afford a house on two good incomes . 
   no one pays for water . 
  no one anywhere ipaysn new zealand for water . 
  we pay for access to it , and farmers have paid for their access to it . 
  people in auckland pay for water . 
  i know that they are charged for water . 
  population size increasing is * absolutely * not a good thing . 
  and no , not in real terms . 
  no , they do n't . 
  stupid cannabis advocates seem to think that hemp is magic material just like they think cannabis is a magic medicine . 
  no , you 're crazy . 
  neither of those cards are powerful . 
  there 's no point using typescript without ` noimplicitany ` and ` strictnullchecks ` . 
   anyone 's free to fork rustc and implement experimental features as you suggest . 
  why is that relevant ? 
  that 's not what i suggested . 
  creating a branch of the rust compiler 's repository and implementing features is how feature development should work . 
   but it seems like a terrible idea to me . 
  at the very least , it would lead to tons of wasted effort . 
  are you nuts ? 
  that 's how all software development does and should work . 
  that 's how all language development works . 
  it 's how all library development works . 
  the era of sitting down and trying to design huge features from scratch on paper is over , and has been for years . 
  the c++ committee 's weakest work was the work they did that was n't based on real implementations and libraries . 
  they created boost as a way to test out library designs before standardising them for this very reason . 
  it 's not ` wasted effort ' to implement these things , because 90 % of the time , the first attempt will probably be fine , or can be modified to work . 
  it 's only a ` waste of time ' or ` waste of effort ' if no information can be gained from it . 
  and that 's exceedingly unlikely . 
  what is a waste of effort is months or years of long , drawn-out discussions on github and dropbox paper and irc and reddit and mailing lists about these things . 
  what is not a waste of effort is someone spending a dozen hours implementing a feature on a branch of the compiler . 
  that 's not a waste of effort . 
  that 's really good use of effort !, 
  most likely it will result in working , useful , production code . 
  if not , then it 's likely to be salvageable . 
  if not , then at least you learn something from it , far more than you learn from months of discussions . 
  for things like the borrow checker , i totally agree that some solid design has to be done first . 
  you ca n't just implement something like that without being mathematically assured that it is sound . 
  but for most of the features there on that page ? 
  they can just be tried out . 
   it 's better to get things right the first time . 
  do you actually write software ? 
  because i seriously doubt you do . 
  iterative development is * the standard * . 
   ionic, 
  please just no . 
   it 's often said but there is no magic fix or hero to spam in order to permanently gain a lot of mmr . 
  that 's just not true though . 
  there are absolutely pubstomp heroes in any mmr bracket . 
  simply picking them does n't make you win , but spamming them will , because you will learn the hero and what makes it a pubstomping hero and then you will stomp pubs . 
   additionally , invis heroes are much more problematic at lower mmr . 
  i do n't really get why people claim this . 
  every time i play invis heroes or play against invis heroes on my 1.5 k mmr account people buy dust and wards , but do n't overspend on them .
