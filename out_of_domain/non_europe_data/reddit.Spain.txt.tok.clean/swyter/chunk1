here , chronologically . 
  this is an excellent practice for my rusty digital manipulation skills . 
  * color corrected + degrained version :, 
  * additional color curves tweak to pop the tones :, 
  * one friend less :, 
  * one friend less , cropped :, 
  removing the other friend is difficult , reconstructing the background from the borders takes a while and is n't going to look that good . 
  hey , this one seems tricky , i love challenges :, 
  * normalized first attempt :, 
  * mixed a bit with the darker original and added highlights :, 
  has been fun . 
  been a while since the last time i worked on something like this . 
  the good part is that it 's useful for someone , so everybody wins . 
  alright . 
  i do n't see that much of a difference , but here you have them . 
  * color corrected + degrained version , without friend :, 
  * same thing , cropped :, 
  mercurial tends to be more painless than its git counterpart . 
  specially for artists and the 90 % . 
  git has gotten popular because of github , do n't choose because of the majority . 
  hg branches tend to be tidier to work with , tortoisehg is a great multiplatform front-end and bitbucket offers private remote hosting for free . 
  i 'm using it for all my projects , and it gets out of the way , if that means something . 
  the github client for windows is horrid . 
  unbelievably silly , heavy and bro hip , i doubt people uses it for anything other than doing minor contributions of pull requests . 
  the entire fixed-sized-single-windowed ui paradigm with flashy animations seems more of a frustrating toy than a real productivity tool . 
  and for the rest it includes a handy * bash * powershell . 
  there 's a [ * largefiles * ] ( http://mercurial.selenic.com/wiki/largefilesextension ) extension for mercurial which handles game assets pretty well . 
  bitbucket does n't supports it yet , tho . 
  i think that it came out quite well , this is just manual color correction :, 
  an improved version with real fixing will be posted in a moment . 
  cropping is a personal thing , finish it as you wish . 
  _ edit _ : polished version , lossless ; there 's very little i can do to fix the blown out parts :, 
  gallery with the editing process , for those interested :, 
  thanks for a good kickstart . 
  another one with more details and fixups :, 
  alternatively , denoised and a bit more colorful :, 
  so much jquery that is hurting my eyes . 
  a nice contribution , but avoid depending on third party libraries as a boilerplate for simple things which can be done more easily in pure js . 
  believe me , you do n't need that ketchup to enjoy your food . 
  you can do it better than that . 
  stop relying on it . 
  my first stab at it , very quick and rough , not my best job by far :, 
  someone should improve on it . 
  thanks for the reddit gold . 
  i manually painted over the crude cutouts and grounded the feet , fixed the shading a bit . 
  let me know what you think . 
  should be way better . 
  nevermind , just saw some editing artifact which i did n't see before , masked them out . 
  this one should be good . 
  i think my mission has been accomplished . 
  has been a lot of fun . 
  you can complete the missing information using the other photograph as reference . 
  then fill the rest by painting manually . 
  you can not uncover what it is n't there . 
  it 's alright . 
  just do n't spoil the secret or claim that is your work . 
  people see what they want to see . 
  just give them hints to convince them , that 's how i work . 
  the second image . 
  hopefully a bit better , albeit with a lot of reconstruction involved :, 
  here are some to choose from , freshly made : http://i.imgur.com/q53imi2.png, 
  they are all in included in the same psd . 
   that was really impressive and i 'm just wondering what software or tools you used to fill in the missing portions ? 
  thanks for the help , it 's much appreciated . 
  photoshop cs5 and patience . 
  as i said in my first message is just a matter of overlaying both images and using portions of it hidden in the other one . 
  the rest is a matter of using the clone tool and family and make it look convincing . 
  the reconstructed wheel has portions painted manually . 
  this can still improved dramatically , what you see is the bare minimum . 
  yeah , i do n't seem to work well when things are overdone beyond my taste . 
  has been fun to raise the bar , anyway . 
  here 's the psd , to anyone interested , have fun with it crediting me, 
  if possible or at least letting me know where you used it :, 
  noise fixup , color and exposure correction plus manual paint and deblur :, 
  hope it pleases you . 
  added a warm filter over it to keep it with the times . 
  the jpeg artifacts were quite strong . 
  nice image , you look fine , girl , and i need to practice :, 
  gallery with making of and some variations , imgur compression is not ideal , tho . 
  and here 's a less contrasty variation , i like variety :, 
  this should be in the dictionary when you search for `` life is unfair . '', 
  cleaned it a bit more , compare it with the other ones if you want :, 
  that 's what you get for using a one-size-fits-all engine instead of going custom built . 
  bloat and overhead . 
  this is my own take , i tried to be subtle :, 
  also , a gallery with the making of , for those interested in the process :, 
  i used masks for non-destructive editing , curve correction , noise , surface blur , color matching and manual brushing , correcting shadows and highlights . 
  color filtered for extra effect . 
  not perfect , but plausible . 
  welcome to the daunting world of camera mapping :, 
  feel free to scale it , if you want . 
  but the best thing would be vectorizing it . 
  hey , i made that one !, 
  i 'd admit that doing a ` websockets ` shim may be a bit more interesting , in fact , that is what i did for my pandora tweaking script , which hooks the ` xmlhttprequest ` object . 
  but i wanted to make it as simple , generic and unobtrusive as possible by wiring it directly to _ their _ js client by using _ their _ own api callback functionality . 
  actually the only thing it does is seeking to the end of the track every time a commercial kicks in , so the _ pay-per-play _ is still counted and hopefully spotify will still earn money . 
  i understand that blocking ads generally does more harm than good , and it 's written in the main summary there , i originally made it for myself after a series of upsetting commercials that did put me off . 
  does n't block in-page ads . 
  a way of avoiding its use may be having less obnoxious audio ads . 
  take note , internet streaming service provider people !,
