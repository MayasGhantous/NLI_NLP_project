  look , even their website says that if you tell them you that if you do n't have one `` one of our enforcement officers may visit you to confirm your situation . '', 
  also , from wikipedia : `` the cost of a television licence is set by the government and enforced by the criminal law . 
  yes , i am aware that you can legitimately own a tv without a, 
  license as long as you do n't receive broadcasts . 
  you 've told them you do n't do so , which is fine . 
  i imagine eventually they 'll pop round and ask to look . 
  if/when they get around to doing that , you 'll have to do a bit of convincing ( or at least have a setup that obviously ca n't receive broadcasts ) . 
  and they * do * assume every unlicensed address has no tv , until at least told otherwise . 
  hence the letters you received . 
  i have to say i find it hard to reconcile my ( generally positive and respectful ) feelings towards the bbc and those i have to the tv licensing chaps ... 
  really ? 
  to me it 's just a show about people whose heads are too big . 
  i distinctly remember watching this , and then getting a bollocking from my dad for dropping a shitload of vhs tapes attempting to recreate it . 
  my router 's ssid is ( and has been for years ) `` we can hear you having sex '' . 
  heh , my very first home server ( a cast-off 133mhz pentium 1 i scrounged from my parents ) was called `` tehgibson '' . 
  no , probably not . 
  but all the lights going out would n't be nearly as dramatic , 
  haha yeah i 've been randomly pondering that in between debugging some code , 
  my conclusion was that because there 's a vacuum between the explosion and the station , there 'd be no shockwave ( think of a boat - if there 's no water , there 's nothing to make waves in ) , only the expanding gases/etc from the explosion itself . 
  which i * guess * would n't travel as far as the shockwave would . 
  but then , the gases would expand more to disperse into the vacuum ... 
  shit . 
  i do n't know . 
  anyone got a spare space station ? 
  we promise to return it in good condition . 
  honest . 
  disco ball, 
  java has a low fuck-count because half the code in any given bit of java source was generated by an ide . 
  what a massive fucking waste of time . 
  it 's exactly the same indecipherable `` enable qpxi21 manifold subsystem interface '' crap as existing bioses , but with a slightly shinier interface . 
  you want to make a bios better ? 
  put some fucking help text in there . 
  ( and i do n't mean ` select ` enable ' to enable < feature  . 
  select ` disable ' to disable < feature  ` ) give me some idea of what some of these obscurely-named things actually * do * , and maybe what i might be fucking up by altering them from the defaults . 
  if you want to go nuts , you could even come up with categories to organise these things into that actually mean something , rather than just throwing shit randomly into arbitrarily-named submenus . 
  oh , and , since we 're on the subject . 
  hardware manufacturers ( and i only mention this because motherboard manufacturers are the worst offenders ) : if you feel the need to write a bit of software ( and you should * really * only do that if * absolutely * necessary ) ** please ** resist the temptation to make the ui look like bad 1980s heavy metal album cover art . 
  it 's not cool , it makes you look like fuckwits . 
  edit : and the next one of you fuckers that releases a bios image packed into a self-installing floppy disk image ( forcing me to install some obscure floppy disk emulation software to even extract the damn thing ) is going to get a big steaming post-hangover turd rma 'd to them . 
  i install bios updates once in a blue moon , i do n't need a floppy drive for anything else , and the disks ( and drives ) are spectacularly unreliable . 
  i refuse to clutter up my box just because motherboard manufacturers are stupid cunts . 
  in my experience , motherboard manuals are useful for one thing and one thing only : finding the pinouts for the unlabelled connectors ( edit : and even that 's generally not required these days , as they mostly use a common connector layout for the front-panel stuff ) . 
  the bios instructions are generally a shitload of useless screenshots that contain no additional information whatsoever . 
  in fact the manual for my most recent motherboard contains exactly the same help text as the bios interface itself . 
  i 'm not necessarily against not having any help text at all in the bios , and moving it to the manual ( as you really should n't be fucking with it if you do n't know what you 're doing ) , but if you 're going to waste time and effort making the interface `` easier to use '' , i 'd much prefer useful inline docs than a pointless gui . 
  find a random independent noodle-bar-type-place , you 'll get pretty much the same food ( but with better ingredients and at half the price ) . 
  that 's probably better written as : ` my @bars = @ { $ foo -  [ 0 ] -  { bar } } ` ( or even ` my @bars = @ { $ foo -  [ 0 ] { bar } } ` ), 
   its syntax appeals to old unix programmers : the shellish variables , the awkesque things , the c-like syntax . 
  maybe perl was `` better than awk '' , but who really cares about awk nowadays ? 
  the syntax is n't particularly onerous unless you go digging around in the dark corners . 
  the sed/awk-ish stuff is most useful for knocking out one-liners , but you wo n't often find anything that cryptic in production code written be a competent perl hacker . 
   no repl, 
  [ devel : : repl ] ( http://search.cpan.org/perldoc?devel::repl ) is beautifully extendable . 
  there are others , too . 
   no compiler, 
  well , ` perl ` is a compiler . 
  but if you meant `` no way to save compiled bytecode to avoid having to recompile it '' , then you 'd be right . 
  ( though i 'm sure there 's * something * on cpan if that 's important to you ), 
   too many ways to do the same thing, 
  tricky to address . 
  this is a massive plus for some people , and a huge disadvantage for others . 
  if you 're a fledgling perl programmer and you 're struggling with this , then i strongly recommend [ perl best practices ] ( http://oreilly.com/catalog/9780596001735 ) . 
   no macros ( so far ), 
  i admit i do n't know enough about why macros are useful to comment . 
   mod \\ _ perl is much more complicated to install and use than mod \\ _ php, 
  mod \\ _ perl is an entirely different beast to mod \\ _ php . 
  mod \\ _ perl is far more powerful in that you can actually interfere with apache 's request/response cycles . 
  massive overkill for most people , but extremely powerful in the right hands . 
  if you 're looking for a way to put the output of some perl code on the web , then i suggest fastcgi . 
  it ai n't * that * messy . 
  in fact it is n't much of an object system , it 's more of a minimal toolkit for building your own ( although if you stick to a few conventions , you can use it without anything layered on top ) . 
  if you want to see what 's possible a modern perl object system looks like , check out [ moose ] ( http://search.cpan.org/perldoc?moose ) . 
  it 's far better than you expect  edit : also have a look at [ moosex : : declare ] ( http://search.cpan.org/perldoc?moosex::declare ) , if sugary syntax is the kind of thing that turns you on . 
   lack of a rigorous description of the language . 
  compare the camel book with the common lisp hyperspec , for example . 
  this is true . 
  i 'm not sure it 's a massive problem , but it 's definitely true . 
  perl 6 does address this , at least to some extent , though . 
   php is easier to use for very simple web things ( no need to use modules , etc. ), 
  hmm , well , php is easier than most anything else for simple web stuff , so i grant you that . 
  many people would argue that php makes it a lot harder to reuse existing code , so perl ( and ruby , python , etc , etc ) definitely have the edge as things get more complicated . 
   no `` killer app '', 
  indeed , and it 's a shame . 
  perl has some lovely stuff ( [ moose ] ( http://search.cpan.org/perldoc?moose ) , which i 've mentioned , a feature-rich orm in the form of [ dbix : : class ] ( http://search.cpan.org/perldoc?dbix::class ) , several web frameworks , including the most popular , [ catalyst ] ( http://search.cpan.org/perldoc?catalyst ) ) . 
  many would argue that cpan is its killer app , however , 
  i absolutely ca n't argue that one thing the php guys got right was ease of deployment . 
  of course , many people will say it 's the * only * thing they got right , 
  on vegans . 
  outraged-hippy does n't taste very nice . 
  i do n't think i 've ever spent 30 seconds washing my hands . . 
  as i 've said to several people over the years , the best method is some random crazy method you invented that nobody else uses . 
  there are huge number of possible ways to do this , but none of them are * completely * immune to being crawled , and generally speaking , the more secure you get , the more annoying it is for the user ( or more effort for you to set up ) . 
  if enough people settle on a single technique , even if it 's a pretty good one , someone will find a way around it . 
  so i recommend doing something random and crazy that nobody else will ever want to implement themselves , and banking on nobody caring enough to bother working around it . 
  the tendency to commit to something , and then never follow through . 
  i hate myself for that . 
  i 've also found it bizarre that people occasionally listen to , believe , and even occasionally act on things i say . 
  there just * is n't * a perfectly secure way to do this . 
  even if you use the common technique of rendering email addresses as images ( which is both painful to set up * and * a horrible user experience ) , they can be read by someone sufficient motivation . 
  the more people that use the same technique , the more there is to be gained by breaking it , so eventually someone * will * decide to do it .
