  maybe 50hz hum ( or 60hz hum , depending on where you live ) . 
  still . 
  good effort !, 
  pretty much any distro is `` programmer-friendly '' . 
  all but those designed to be extremely compact will come with a c compiler , and whatever additional language compilers/interpreters you want will only be a command or two away . 
  ultimately , you can run pretty much the same software on all of them , the only difference is how you get there . 
  so , really , it depends what you want to do with it . 
  if you just want a system up and running that works which you can start developing on , then you probably want to go with one of the full-featured distros with good desktop support ( uh , this is n't really my thing , but ubuntu is very popular , fedora should do you too , maybe mint . 
  i 'm sure others can suggest some more ) . 
  if you want to learn how the system works them you could go with a more bare-bones source-based distribution . 
  i like freebsd , personally , but the other bsds are good , and gentoo practically forces you to learn how the system is put together before you can do anything . 
  it can take a bit of effort to have a fully working desktop system with those , but you 'll learn a * lot * in the process . 
  osx is more `` closed source '' than windows ? 
  i 'm not sure where you get that idea . 
  osx is a shiny closed-source layer on top of an open source bsd core system . 
  even stuff like safari is the same , a nice interface over the top of the open-source webkit engine . 
  beneath the pretty interface it 's not far from a typical unix/linux system , and makes an excellent alternative if you do n't want to spend the time to set everything up ( and have the money to drop on it  ), 
  hmm . 
  i do n't claim to know the answer to this , but my feeling has always been that most open-source software is developed on and/or for open-source operating systems . 
  there is certianly lots of open source software available for windows , but most of it seems to be cross-platform . 
  i use both windows and open source oss ( mostly freebsd ) . 
  while i do run a few bits of open source software on windows ( most of which is available on other platforms ) , my nix boxes run an entirely open source software all compiled from source , apart from binary graphics card drivers ( although that should be changing soon ) . 
  and pretty much anything you can run on freebsd or linux will also run on osx , although sometimes with a bit of effort . 
  why not ? 
  if you 're a unix systems programmer , then i can understand you 'd want something a bit more flexible , but most people - programmers included - will want a system that provides a solid environment upon which they can do their work . 
  i 've written code that parses hundreds of csv files every day . 
  and these are n't csvs produced by my own code , or even by a single system - they 're from random users , generated in a variety of different ways , which i have little-or-no control over . 
  works fine . 
  but the shit i went through when we started getting xml files . 
  yeah , lack of a single standard is a pain in the arse , but fortunately most things that emit csvs are vaguely sensible about it . 
  so in practice it 's not much of a problem . 
  the main advantage csv has over xml ( at least for data that can be hammered into a flat list of fields-and-records ) is that you know exactly what you 're getting . 
  with xml you can parse it , and get a tree structure out , but you ca n't do much with it unless a ) you know how the tree should look b ) you know what it * means * ( and a dtd wo n't tell you that  ) and c ) whoever or whatever produced it was competent enough to actually stick to it, 
  okay i 'll grant you that , in the general case , an unknown csv format is just as meaningless as an unknown xml format . 
  however , in the real world ( and i 'm speaking from , albeit narrow , experience of dealing with xml generated by 3rd parties ) , i find that you know what the data should be representing , but not the details about what each bit actually is . 
  with a csv , this is generally pretty easy to work out , since the format is simple enough that there 's only so many ways it can be represented . 
  with xml - all bets are off !, 
  you can represent data in a variety of different ways ( there are often several that would be considered `` correct '' ) . 
  sure , you can publish a dtd and hope that people can be bothered to follow it . 
  although in my ( again , limited ) experience , few people will do so . . ( and that 's if they do n't try to impose * their * dtd on you  ), 
  so really , what i was getting at is that , for all its faults , csv is simple enough that the ways in which someone can fuck it up are rather limited . 
  for the record , if something is too complicated for csv then i prefer json where possible , yaml where not , and only fall back on xml if i have to deal with some external horribleness . 
  now json and yaml lack many features of xml , i ca n't hammer them with xpath or xslt , etc. . 
  but in practice i still find they 're far , far easier to deal with . 
  the markup overhead does n't make a lot of difference , i agree . 
  ( note i did n't mention that , good work knocking down that straw man  ), 
  pff , that 's bollocks . 
  everyone knows yellow is better . 
  i * know * opening 30 tabs is going to eat a lot of memory , i do n't expect miracles . 
  what i 'm more interested in is what happens to that memory * when i close 29 of them * . 
  many people open their browser when their computer boots , and do n't close it again until they shut the thing down . 
  firefox will happily chew up increasing amounts of memory until it gets to the point where it 's eating half my system ram and grinding along slowly . 
  only way to fix that is to kill it and start it up again . 
  also , i think it 's great that the chrome guys put such a focus on speed - it 's forced all the other browser vendors to do so as well ( well . 
  except ms. 
  but you knew that , right ? ) . 
  the problem i have , however , is that it 's not a killer feature in and of itself . 
  javascript is pretty fast as it stands unless you 're doing a huge amount of complicated stuff , and we still have to develop with ie in mind anyway , so for the next few years , doing lots of complicated stuff is n't really viable . 
  is it really worth taking a huge memory hit in return for extra speed you ca n't actually use very effectively ? 
  separating your tabs into different processes is all well and good ( well , except it 's basically the same as how ie6 worked , you just get a tab bar to use instead of the taskbar ) , but from a user 's point of view , most of the benefits are also provided by ff 's ` restore session ' . 
  i 'm talking about over the course of a day or two . 
  for example , my firefox ( 3.0 . whatever 's - latest ) is currently eating ~ 230mb , with three tabs open ( this page and a coupla language reference pages ) . 
  if i restart it , open the same three pages , it 'll be using less . 
  if i leave it alone and continue to go about my business for a day or so , it 'll be using more like 700mb regardless of how many tabs are open . 
  i 'm not trying to pretend this is a scientific experiment in any way , just that it 's something that 's bothered me for a while . 
  and bothered me more than `` lots of tabs use lots of ram '' - i knew that , 
  edit : i killed ff from the task manager , started it up again and let it ` restore session ' . 
  the problem , for me , is that sgml is for markup up documents . 
  it does n't make much sense to use it for a general data format . 
  that 's fine , and it works well , the syntax fits with that usage nicely ( that is , there 's usually an obvious distinction between content and metadata - stripping out all the tags leaves you with something vaguely sensible ) . 
  xml , on the other hand , seems to be an attempt to use sgml-like syntax for general data . 
  and it does n't work as well . 
  it 's rather verbose , and in many cases harder to read than other formats - especially when the metadata outweighs the content . 
  it does n't translate nicely into data structures that many languages can handle natively , requiring some rather complicated code to actually do anything with it ( compared to , for example , something like json , which can be represented and manipulated as a native data structure in many languages ) . 
  but worse than that , the insistence on all documents validating properly means it 's not that useful for document markup any more ( and i suspect the reason it still has n't become more widespread on the web - which browser vendor wants to be the first to display an error rather than the page ? ) . 
  then there are the people using it for configuration files and the like . 
  well , that 's just cruel . 
  nobody wants to edit those by hand ( and it 's very easy to unwittingly fuck something up ) . 
  so it 's kinda shitty for everything . 
  but people have continued to layer on increasingly complicated stuff , which is * very * clever , but also a complete pain in the arse to * use * ( hands up who wants to debug a soap parser ? ) . 
  i 've been programming for nearly 10 years , in a variety of languages . 
  one important lesson i 've learnt is that simple solutions are * far * better than complicated ones . 
  i tried to learn to love xml , but it just throws more and more roadblocks in the way . 
  admittedly there are few problems that xml creates that do n't have solutions , but those solutions tend to be achieved by adding complexity . 
  and that just scares me . 
  why would i close it ? 
  i did read that wall of text , yes . 
  that 's not me missing the point , that 's me disagreeing with you , 
  edit : for the record , i do n't disagree completely . 
  you make good points that it gave people a way to start using ( and demanding ) more open formats , and i * do * agree that , generally speaking , it 's been a `` force for good '' . 
  i was simply stating that i think it 's now gone a bit too far , been misused for stuff that does n't work well with it , and become just as complicated ( if not moreso ) than the problems that it was intended to solve . 
  well , i have a `` minimise '' button . . 
  i do n't leave tabs open when i 'm finished with them . 
  i rarely have more than a dozen or so open at one time ( 6 right now . 
  the same two language reference pages i had open before , a random flickr pic i have n't looked at yet , reddit homepage , and a reddit comment page where i appear to be having a heated discussion about xml with a dude who 's stroppy because he thinks i have n't read his massive rant . 
  oh , and this page ) . 
  i meant i was disagreeing with the general gist of your rant , which seems to be `` xml is good , do n't blame it when people use it in horrible ways '' . 
  i do n't care what great stuff it has brought , i just want a means to wrap some content in some metadata , or write a config file , or mark up some data in a meaningful and easily-parseable manner . 
  actually , i do n't like doing this , but , you know what ? 
  fuck it .
